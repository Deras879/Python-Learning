{
  "coursePlan": {
    "title": "Python Completo: De Principiante a Experto",
    "description": "Un curso completo de Python que te llevará desde los conceptos básicos hasta un nivel profesional",
    "totalLessons": 75,
    "estimatedTime": "120-150 horas"
  },
  "lessons": {
    "python-intro": {
      "title": "Introducción a Python",
      "sections": [
        {
          "type": "theory",
          "title": "¿Qué es Python?",
          "content": "Python es un lenguaje de programación de alto nivel, interpretado y de propósito general. Fue creado por Guido van Rossum en 1991 y se caracteriza por su sintaxis clara y legible.\n\nCaracterísticas principales:\n• Sintaxis simple y clara\n• Multiplataforma (Windows, Mac, Linux)\n• Gran comunidad y librerías\n• Versatil: web, data science, automatización, IA",
          "example": "# Tu primer programa en Python\nprint(\"¡Hola, mundo!\")\nprint(\"Bienvenido a Python\")\n\n# Python es fácil de leer\nnombre = \"Programador\"\nprint(f\"Hola, {nombre}!\")\n\n# Comentarios con #\n# Python ignora esta línea"
        },
        {
          "type": "theory",
          "title": "Filosofía de Python: The Zen of Python",
          "content": "Python tiene una filosofía de diseño que enfatiza la legibilidad del código. Los principios fundamentales son:\n\n• Hermoso es mejor que feo\n• Explícito es mejor que implícito\n• Simple es mejor que complejo\n• La legibilidad cuenta\n• Los errores nunca deberían pasar silenciosamente",
          "example": "# Puedes ver la filosofía completa de Python:\nimport this\n\n# Ejemplo de código pythónico (limpio y legible)\nnumeros = [1, 2, 3, 4, 5]\ncuadrados = [x**2 for x in numeros]\nprint(cuadrados)  # [1, 4, 9, 16, 25]"
        },
        {
          "type": "exercise",
          "title": "Tu primer programa",
          "description": "Crea un programa que imprima información sobre ti: tu nombre, tu edad y una cosa que te guste de la programación.",
          "startingCode": "# Tu primer programa personalizado\n# Completa el código para que muestre información sobre ti\n\n# Tu nombre\nnombre = \"Tu Nombre Aquí\"\n\n# Tu edad\nedad = 25\n\n# Algo que te gusta de programar\nrazon = \"Me gusta resolver problemas\"\n\n# Imprime la información\nprint(f\"Hola, soy {nombre}\")\n# Completa con print() para edad y razón\n",
          "solution": "nombre = \"Juan\"\nedad = 25\nrazon = \"Me gusta crear cosas útiles\"\n\nprint(f\"Hola, soy {nombre}\")\nprint(f\"Tengo {edad} años\")\nprint(f\"Me gusta programar porque: {razon}\")",
          "validation": "(code) => code.includes('print(') && code.includes('nombre') && code.includes('edad')"
        }
      ]
    },

    "variables-basic": {
      "title": "Variables y Asignación",
      "sections": [
        {
          "type": "theory",
          "title": "¿Qué son las Variables?",
          "content": "Una variable es como una caja etiquetada donde guardamos información. En Python, crear una variable es muy simple: solo asignas un valor a un nombre.\n\nCaracterísticas importantes:\n• No necesitas declarar el tipo de variable\n• Python determina automáticamente el tipo\n• Puedes cambiar el valor y tipo en cualquier momento\n• Los nombres son sensibles a mayúsculas y minúsculas",
          "example": "# Crear variables es muy fácil\nnombre = \"Ana\"           # String (texto)\nedad = 25               # Integer (entero)\naltura = 1.65           # Float (decimal)\nes_estudiante = True    # Boolean (verdadero/falso)\n\n# Imprimir variables\nprint(nombre)\nprint(edad)\nprint(altura)\nprint(es_estudiante)\n\n# Variables son sensibles a mayúsculas\nNombre = \"Pedro\"  # Diferente a 'nombre'\nprint(nombre)    # \"Ana\"\nprint(Nombre)    # \"Pedro\""
        },
        {
          "type": "theory",
          "title": "Reglas para Nombres de Variables",
          "content": "Python tiene reglas específicas para nombrar variables:\n\n✅ PUEDEN:\n• Empezar con letra (a-z, A-Z) o guión bajo (_)\n• Contener letras, números y guiones bajos\n• Ser de cualquier longitud\n\n❌ NO PUEDEN:\n• Empezar con números\n• Contener espacios o caracteres especiales\n• Ser palabras reservadas de Python",
          "example": "# ✅ Nombres válidos\nmi_nombre = \"Juan\"\nnombre_usuario = \"juan123\"\nedad2 = 30\n_contador = 0\nNOMBRE_CONSTANTE = \"Python\"\n\n# ❌ Nombres inválidos (estos darían error)\n# 2edad = 25           # No puede empezar con número\n# mi-variable = 10     # No puede tener guiones\n# nombre completo = \"Juan\"  # No puede tener espacios\n# class = \"Python\"     # 'class' es palabra reservada\n\n# Convención: usar snake_case para variables\nmi_variable_larga = \"Valor\"\nprecio_producto = 99.99"
        },
        {
          "type": "theory",
          "title": "Asignación Múltiple",
          "content": "Python permite asignar valores a múltiples variables de formas elegantes:\n\n• Asignación múltiple en una línea\n• Intercambio de valores\n• Asignación del mismo valor a múltiples variables\n• Desempaquetado de secuencias",
          "example": "# Asignación múltiple\nx, y, z = 10, 20, 30\nprint(x, y, z)  # 10 20 30\n\n# Intercambio de variables (¡muy útil!)\na = 5\nb = 10\nprint(f\"Antes: a={a}, b={b}\")\na, b = b, a  # Intercambio\nprint(f\"Después: a={a}, b={b}\")\n\n# Mismo valor a múltiples variables\nx = y = z = 0\nprint(x, y, z)  # 0 0 0\n\n# Desempaquetar una lista\ncolores = [\"rojo\", \"verde\", \"azul\"]\ncolor1, color2, color3 = colores\nprint(color1)  # \"rojo\""
        },
        {
          "type": "exercise",
          "title": "Ejercicio: Información Personal",
          "description": "Crea variables para almacenar información personal y luego intercambia algunos valores. Usa asignación múltiple y muestra los resultados.",
          "startingCode": "# Crea variables para información personal\n# Usa asignación múltiple para crear estas variables en una línea:\n# nombre, apellido, ciudad\n\n# Tu código aquí:\nnombre, apellido, ciudad = \"Tu Nombre\", \"Tu Apellido\", \"Tu Ciudad\"\n\n# Crea dos variables para tus pasatiempos favoritos\npasatiempo1 = \"leer\"\npasatiempo2 = \"programar\"\n\n# Imprime la información inicial\nprint(f\"Nombre completo: {nombre} {apellido}\")\nprint(f\"Ciudad: {ciudad}\")\nprint(f\"Pasatiempos: {pasatiempo1} y {pasatiempo2}\")\n\n# Intercambia los pasatiempos\n# Tu código aquí para intercambiar pasatiempo1 y pasatiempo2\n\n# Imprime después del intercambio\nprint(\"\\nDespués del intercambio:\")\nprint(f\"Pasatiempos: {pasatiempo1} y {pasatiempo2}\")\n",
          "solution": "nombre, apellido, ciudad = \"Ana\", \"García\", \"Madrid\"\npasatiempo1 = \"leer\"\npasatiempo2 = \"programar\"\n\nprint(f\"Nombre completo: {nombre} {apellido}\")\nprint(f\"Ciudad: {ciudad}\")\nprint(f\"Pasatiempos: {pasatiempo1} y {pasatiempo2}\")\n\npasatiempo1, pasatiempo2 = pasatiempo2, pasatiempo1\n\nprint(\"\\nDespués del intercambio:\")\nprint(f\"Pasatiempos: {pasatiempo1} y {pasatiempo2}\")",
          "validation": "(code) => code.includes(',') && code.includes('=') && code.includes('print(')"
        }
      ]
    },

    "data-types-basic": {
      "title": "Tipos de Datos Primitivos",
      "sections": [
        {
          "type": "theory",
          "title": "Tipos de Datos Básicos",
          "content": "Python tiene varios tipos de datos fundamentales que debes conocer:\n\n• **int** (entero): Números sin decimales\n• **float** (flotante): Números con decimales\n• **str** (string): Texto o cadenas de caracteres\n• **bool** (booleano): Verdadero (True) o Falso (False)\n• **NoneType**: Representa la ausencia de valor (None)",
          "example": "# Ejemplos de cada tipo de dato\n\n# int (enteros)\nedad = 25\ntemperatura = -10\ncontador = 0\nprint(type(edad))      # <class 'int'>\n\n# float (decimales)\nprecio = 99.99\npi = 3.14159\nporcentaje = 0.85\nprint(type(precio))    # <class 'float'>\n\n# str (strings/texto)\nnombre = \"Python\"\nmensaje = 'Hola mundo'\ntexto_vacio = \"\"\nprint(type(nombre))    # <class 'str'>\n\n# bool (booleanos)\nes_verdad = True\nes_falso = False\nprint(type(es_verdad)) # <class 'bool'>\n\n# NoneType\nvalor_nulo = None\nprint(type(valor_nulo)) # <class 'NoneType'>"
        },
        {
          "type": "theory",
          "title": "Trabajando con Numbers (int y float)",
          "content": "Los números son fundamentales en programación. Python maneja automáticamente los tipos numéricos:\n\n• **int**: Para contadores, edades, índices\n• **float**: Para precios, medidas, cálculos científicos\n• Python convierte automáticamente entre tipos cuando es necesario\n• Puedes usar notación científica para números muy grandes o pequeños",
          "example": "# Números enteros\ncontador = 42\nedad = 25\nannio = 2024\n\n# Números decimales\nprecio = 19.99\npi = 3.14159\ntemperatura = 36.5\n\n# Números grandes\npoblacion_mundial = 8_000_000_000  # Python permite _ como separador\nvelocidad_luz = 3e8  # Notación científica: 3 * 10^8\n\n# Operaciones automáticas\nentero = 10\ndecimal = 3.5\nresultado = entero + decimal  # Python convierte automáticamente\nprint(resultado)       # 13.5 (float)\nprint(type(resultado)) # <class 'float'>\n\n# Números negativos\ndeuda = -1500\ntemperatura_bajo_cero = -20.5"
        },
        {
          "type": "theory",
          "title": "Conversión entre Tipos",
          "content": "Python permite convertir entre diferentes tipos de datos usando funciones especiales:\n\n• **int()**: Convierte a entero\n• **float()**: Convierte a decimal\n• **str()**: Convierte a texto\n• **bool()**: Convierte a booleano\n\n⚠️ Cuidado: Algunas conversiones pueden generar errores",
          "example": "# Conversiones exitosas\nnumero_texto = \"123\"\nnumero_entero = int(numero_texto)\nprint(numero_entero)  # 123\n\ndecimal_texto = \"45.67\"\nnumero_decimal = float(decimal_texto)\nprint(numero_decimal)  # 45.67\n\nedad = 25\nedad_texto = str(edad)\nprint(edad_texto)     # \"25\"\n\n# Conversiones de decimales a enteros (pierde la parte decimal)\npi = 3.14159\npi_entero = int(pi)\nprint(pi_entero)      # 3\n\n# Conversiones a boolean\nprint(bool(1))        # True\nprint(bool(0))        # False\nprint(bool(\"\"))       # False (string vacío)\nprint(bool(\"hola\"))   # True\nprint(bool(None))     # False\n\n# ⚠️ Esto causaría error:\n# int(\"hola\")         # ValueError\n# float(\"abc\")        # ValueError"
        },
        {
          "type": "exercise",
          "title": "Ejercicio: Calculadora de Datos Personales",
          "description": "Crea un programa que calcule información personal: convierte tu edad en días, tu altura en diferentes unidades, y determina si eres mayor de edad.",
          "startingCode": "# Calculadora de datos personales\n\n# Datos iniciales (modifica con tus datos)\nedad_anos = 25\naltura_metros = 1.75\nnombre = \"Tu Nombre\"\n\n# 1. Convierte edad a días (aproximado: 365 días por año)\nedad_dias = edad_anos * 365\n\n# 2. Convierte altura a centímetros\naltura_cm = altura_metros * 100\n\n# 3. Determina si eres mayor de edad\nes_mayor_edad = edad_anos >= 18\n\n# 4. Crea un resumen como string\nresumen = f\"Resumen de {nombre}: {edad_anos} años = {edad_dias} días\"\n\n# Muestra todos los resultados\nprint(f\"Nombre: {nombre}\")\nprint(f\"Edad: {edad_anos} años\")\nprint(f\"Edad en días: {edad_dias}\")\nprint(f\"Altura: {altura_metros}m = {altura_cm}cm\")\nprint(f\"¿Mayor de edad? {es_mayor_edad}\")\nprint(resumen)\n\n# Bonus: Muestra los tipos de datos\nprint(f\"\\nTipos de datos:\")\nprint(f\"edad_anos es tipo: {type(edad_anos)}\")\nprint(f\"altura_metros es tipo: {type(altura_metros)}\")\nprint(f\"es_mayor_edad es tipo: {type(es_mayor_edad)}\")\n",
          "solution": "edad_anos = 25\naltura_metros = 1.75\nnombre = \"Ana\"\n\nedad_dias = edad_anos * 365\naltura_cm = altura_metros * 100\nes_mayor_edad = edad_anos >= 18\nresumen = f\"Resumen de {nombre}: {edad_anos} años = {edad_dias} días\"\n\nprint(f\"Nombre: {nombre}\")\nprint(f\"Edad: {edad_anos} años\")\nprint(f\"Edad en días: {edad_dias}\")\nprint(f\"Altura: {altura_metros}m = {altura_cm}cm\")\nprint(f\"¿Mayor de edad? {es_mayor_edad}\")\nprint(resumen)\n\nprint(f\"\\nTipos de datos:\")\nprint(f\"edad_anos es tipo: {type(edad_anos)}\")\nprint(f\"altura_metros es tipo: {type(altura_metros)}\")\nprint(f\"es_mayor_edad es tipo: {type(es_mayor_edad)}\")",
          "validation": "(code) => code.includes('*') && code.includes('>=') && code.includes('type(')"
        }
      ]
    },

    "input-output": {
      "title": "Entrada y Salida de Datos",
      "sections": [
        {
          "type": "theory",
          "title": "La función input()",
          "content": "La función input() es tu herramienta para interactuar con el usuario. Permite que tu programa reciba información desde el teclado.\n\nCaracterísticas importantes:\n• Siempre devuelve un **string** (texto)\n• Pausa la ejecución hasta que el usuario presione Enter\n• Puedes mostrar un mensaje de solicitud\n• Para números, necesitas convertir el resultado",
          "example": "# input() básico\nnombre = input(\"¿Cuál es tu nombre? \")\nprint(f\"Hola, {nombre}!\")\n\n# input() siempre devuelve string\nedad_str = input(\"¿Cuántos años tienes? \")\nprint(f\"Escribiste: '{edad_str}'\")\nprint(f\"Tipo de dato: {type(edad_str)}\")\n\n# Para usar como número, hay que convertir\nedad_num = int(edad_str)\nprint(f\"El próximo año tendrás {edad_num + 1} años\")\n\n# Ejemplo práctico\ncolor_favorito = input(\"¿Cuál es tu color favorito? \")\nprint(f\"¡{color_favorito} es un color hermoso!\")"
        },
        {
          "type": "theory",
          "title": "Formateo de Strings Avanzado",
          "content": "Python ofrece varias formas de formatear texto. Los f-strings son la forma más moderna y recomendada:\n\n• **f-strings**: f\"Hola {variable}\" (Python 3.6+)\n• **.format()**: \"Hola {}\".format(variable)\n• **% formatting**: \"Hola %s\" % variable (antiguo)\n\nLos f-strings permiten expresiones y formateo avanzado.",
          "example": "# f-strings (recomendado)\nnombre = \"Ana\"\nedad = 25\nprecio = 19.99\n\n# Básico\nprint(f\"Hola {nombre}, tienes {edad} años\")\n\n# Con expresiones\nprint(f\"El próximo año tendrás {edad + 1} años\")\n\n# Formateo de números\nprint(f\"Precio: ${precio:.2f}\")  # $19.99\nprint(f\"Precio redondeado: ${precio:.0f}\")  # $20\n\n# Alineación\nprint(f\"{'Nombre':<10} {'Edad':>5}\")\nprint(f\"{nombre:<10} {edad:>5}\")\n\n# .format() (alternativa)\nprint(\"Hola {}, tienes {} años\".format(nombre, edad))\nprint(\"Hola {n}, tienes {e} años\".format(n=nombre, e=edad))\n\n# % formatting (antiguo, evitar)\nprint(\"Hola %s, tienes %d años\" % (nombre, edad))"
        },
        {
          "type": "theory",
          "title": "Manejo de Errores en Input",
          "content": "Cuando trabajas con input(), especialmente para números, pueden ocurrir errores si el usuario ingresa datos incorrectos.\n\nEstrategias para manejar errores:\n• Validar antes de convertir\n• Usar métodos de string para verificar\n• Proporcionar mensajes claros al usuario\n• Considerar valores por defecto",
          "example": "# Verificar si es número antes de convertir\nentrada = input(\"Ingresa un número: \")\n\nif entrada.isdigit():\n    numero = int(entrada)\n    print(f\"El doble de {numero} es {numero * 2}\")\nelse:\n    print(\"Eso no parece ser un número entero\")\n\n# Verificar decimales\nentrada_decimal = input(\"Ingresa un decimal: \")\n\ntry:\n    decimal = float(entrada_decimal)\n    print(f\"El número es: {decimal}\")\nexcept ValueError:\n    print(\"No es un número válido\")\n\n# Función helper para input seguro\ndef pedir_numero(mensaje):\n    while True:\n        try:\n            return float(input(mensaje))\n        except ValueError:\n            print(\"Por favor, ingresa un número válido\")\n\n# Usar la función\n# numero = pedir_numero(\"Dame un número: \")\n# print(f\"Recibí: {numero}\")"
        },
        {
          "type": "exercise",
          "title": "Ejercicio: Calculadora Personal Interactiva",
          "description": "Crea una calculadora que pida al usuario dos números y una operación, luego muestre el resultado formateado elegantemente.",
          "startingCode": "# Calculadora Personal Interactiva\n\nprint(\"=== CALCULADORA PERSONAL ===\")\nprint(\"Vamos a hacer algunos cálculos juntos!\\n\")\n\n# Pide información personal\nnombre = input(\"Primero, ¿cuál es tu nombre? \")\nprint(f\"¡Hola {nombre}! Empecemos a calcular.\\n\")\n\n# Pide los números\nprint(\"Ingresa dos números para calcular:\")\nnum1_str = input(\"Primer número: \")\nnum2_str = input(\"Segundo número: \")\n\n# Convierte a números\nnum1 = float(num1_str)\nnum2 = float(num2_str)\n\n# Pide la operación\nprint(\"\\n¿Qué operación quieres hacer?\")\nprint(\"1. Suma (+)\")\nprint(\"2. Resta (-)\")\nprint(\"3. Multiplicación (*)\")\nprint(\"4. División (/)\")\n\noperacion = input(\"Elige una opción (1-4): \")\n\n# Realiza el cálculo basado en la elección\nif operacion == \"1\":\n    resultado = num1 + num2\n    simbolo = \"+\"\nelif operacion == \"2\":\n    resultado = num1 - num2\n    simbolo = \"-\"\nelif operacion == \"3\":\n    resultado = num1 * num2\n    simbolo = \"*\"\nelif operacion == \"4\":\n    if num2 != 0:\n        resultado = num1 / num2\n        simbolo = \"/\"\n    else:\n        print(\"¡Error! No se puede dividir por cero.\")\n        resultado = None\n        simbolo = \"/\"\nelse:\n    print(\"Opción no válida\")\n    resultado = None\n    simbolo = \"?\"\n\n# Muestra el resultado formateado\nif resultado is not None:\n    print(f\"\\n=== RESULTADO PARA {nombre.upper()} ===\")\n    print(f\"{num1} {simbolo} {num2} = {resultado:.2f}\")\n    print(f\"¡Excelente trabajo, {nombre}!\")\n",
          "solution": "print(\"=== CALCULADORA PERSONAL ===\")\nprint(\"Vamos a hacer algunos cálculos juntos!\\n\")\n\nnombre = input(\"Primero, ¿cuál es tu nombre? \")\nprint(f\"¡Hola {nombre}! Empecemos a calcular.\\n\")\n\nprint(\"Ingresa dos números para calcular:\")\nnum1_str = input(\"Primer número: \")\nnum2_str = input(\"Segundo número: \")\n\nnum1 = float(num1_str)\nnum2 = float(num2_str)\n\nprint(\"\\n¿Qué operación quieres hacer?\")\nprint(\"1. Suma (+)\")\nprint(\"2. Resta (-)\")\nprint(\"3. Multiplicación (*)\")\nprint(\"4. División (/)\")\n\noperacion = input(\"Elige una opción (1-4): \")\n\nif operacion == \"1\":\n    resultado = num1 + num2\n    simbolo = \"+\"\nelif operacion == \"2\":\n    resultado = num1 - num2\n    simbolo = \"-\"\nelif operacion == \"3\":\n    resultado = num1 * num2\n    simbolo = \"*\"\nelif operacion == \"4\":\n    if num2 != 0:\n        resultado = num1 / num2\n        simbolo = \"/\"\n    else:\n        print(\"¡Error! No se puede dividir por cero.\")\n        resultado = None\n        simbolo = \"/\"\nelse:\n    print(\"Opción no válida\")\n    resultado = None\n    simbolo = \"?\"\n\nif resultado is not None:\n    print(f\"\\n=== RESULTADO PARA {nombre.upper()} ===\")\n    print(f\"{num1} {simbolo} {num2} = {resultado:.2f}\")\n    print(f\"¡Excelente trabajo, {nombre}!\")",
          "validation": "(code) => code.includes('input(') && code.includes('float(') && code.includes('if') && code.includes('f\"')"
        }
      ]
    },

    "operators-arithmetic": {
      "title": "Operadores Aritméticos",
      "sections": [
        {
          "type": "theory",
          "title": "Operadores Matemáticos Básicos",
          "content": "Python incluye todos los operadores matemáticos que necesitas para realizar cálculos:\n\n• **+** (suma): Suma dos números\n• **-** (resta): Resta dos números\n• ***** (multiplicación): Multiplica dos números\n• **/** (división): División con resultado decimal\n• **//** (división entera): División que devuelve solo la parte entera\n• **%** (módulo): Resto de una división\n• ****** (exponenciación): Eleva un número a una potencia",
          "example": "# Operadores básicos\na = 15\nb = 4\n\nprint(f\"Suma: {a} + {b} = {a + b}\")           # 19\nprint(f\"Resta: {a} - {b} = {a - b}\")          # 11\nprint(f\"Multiplicación: {a} * {b} = {a * b}\") # 60\nprint(f\"División: {a} / {b} = {a / b}\")       # 3.75\nprint(f\"División entera: {a} // {b} = {a // b}\") # 3\nprint(f\"Módulo: {a} % {b} = {a % b}\")         # 3\nprint(f\"Exponenciación: {a} ** {b} = {a ** b}\") # 50625\n\n# Ejemplos prácticos\nprecio = 19.99\ncantidad = 3\ntotal = precio * cantidad\nprint(f\"Total a pagar: ${total:.2f}\")"
        },
        {
          "type": "theory",
          "title": "Precedencia de Operadores",
          "content": "Python sigue las reglas matemáticas tradicionales para el orden de las operaciones:\n\n1. **Paréntesis** ()\n2. **Exponenciación** **\n3. **Multiplicación, División, División entera, Módulo** *, /, //, %\n4. **Suma y Resta** +, -\n\nUsa paréntesis para cambiar el orden de evaluación y hacer tu código más claro.",
          "example": "# Sin paréntesis (sigue precedencia)\nresultado1 = 10 + 3 * 2    # 10 + 6 = 16\nprint(f\"10 + 3 * 2 = {resultado1}\")  # 16\n\n# Con paréntesis (cambia el orden)\nresultado2 = (10 + 3) * 2  # 13 * 2 = 26\nprint(f\"(10 + 3) * 2 = {resultado2}\")  # 26\n\n# Ejemplo complejo\nformula = 2 * 3 ** 2 + 5 * (4 - 2)\nprint(f\"2 * 3² + 5 * (4 - 2) = {formula}\")  # 2 * 9 + 5 * 2 = 28\n\n# Siempre usa paréntesis para claridad\npromedio = (nota1 + nota2 + nota3) / 3\narea_circulo = 3.14159 * (radio ** 2)"
        },
        {
          "type": "theory",
          "title": "Operadores de Asignación Compuesta",
          "content": "Python ofrece operadores que combinan una operación aritmética con asignación, haciendo el código más conciso:\n\n• **+=** (suma y asigna)\n• **-=** (resta y asigna)\n• ***=** (multiplica y asigna)\n• **/=** (divide y asigna)\n• **//=** (división entera y asigna)\n• **%=** (módulo y asigna)\n• ****=** (exponenciación y asigna)",
          "example": "# Operadores de asignación compuesta\ncontador = 10\nprint(f\"Inicial: {contador}\")\n\n# Equivalente a: contador = contador + 5\ncontador += 5\nprint(f\"Después de += 5: {contador}\")  # 15\n\n# Equivalente a: contador = contador * 2\ncontador *= 2\nprint(f\"Después de *= 2: {contador}\")  # 30\n\n# Ejemplo práctico: acumular puntos\npuntos = 0\npuntos += 100  # Completó nivel 1\npuntos += 250  # Completó nivel 2\npuntos += 500  # Completó nivel 3\nprint(f\"Puntos totales: {puntos}\")  # 850\n\n# Calcular descuento\nprecio = 100\nprecio *= 0.8  # 20% de descuento\nprint(f\"Precio con descuento: ${precio}\")"
        },
        {
          "type": "exercise",
          "title": "Ejercicio: Calculadora de Presupuesto",
          "description": "Crea una calculadora de presupuesto personal que calcule ingresos, gastos y ahorro. Usa diferentes operadores aritméticos y operadores de asignación compuesta.",
          "startingCode": "# Calculadora de Presupuesto Personal\n\nprint(\"=== CALCULADORA DE PRESUPUESTO ===\")\n\n# Ingresos mensuales\nsalario_base = float(input(\"Salario base mensual: $\"))\nbonos = float(input(\"Bonos adicionales: $\"))\ningresos_extra = float(input(\"Ingresos extra: $\"))\n\n# Calcular ingresos totales\ningresos_totales = salario_base + bonos + ingresos_extra\n\n# Gastos mensuales\nrenta = float(input(\"\\nRenta/Hipoteca: $\"))\ncomida = float(input(\"Comida: $\"))\ntransporte = float(input(\"Transporte: $\"))\nentretenimiento = float(input(\"Entretenimiento: $\"))\n\n# Calcular gastos totales\ngastos_totales = renta + comida + transporte + entretenimiento\n\n# Calcular diferencia\ndiferencia = ingresos_totales - gastos_totales\n\n# Calcular porcentajes\nporcentaje_ahorro = (diferencia / ingresos_totales) * 100\nporcentaje_gastos = (gastos_totales / ingresos_totales) * 100\n\n# Mostrar resumen\nprint(f\"\\n=== RESUMEN FINANCIERO ===\")\nprint(f\"Ingresos totales: ${ingresos_totales:.2f}\")\nprint(f\"Gastos totales: ${gastos_totales:.2f}\")\nprint(f\"Diferencia: ${diferencia:.2f}\")\n\nif diferencia > 0:\n    print(f\"¡Excelente! Ahorras ${diferencia:.2f} ({porcentaje_ahorro:.1f}%)\")\n    \n    # Calcular metas de ahorro\n    ahorro_anual = diferencia * 12\n    ahorro_5_anos = ahorro_anual * 5\n    \n    print(f\"\\n=== PROYECCIONES ===\")\n    print(f\"Ahorro anual: ${ahorro_anual:.2f}\")\n    print(f\"Ahorro en 5 años: ${ahorro_5_anos:.2f}\")\nelse:\n    deficit = abs(diferencia)\n    print(f\"⚠️ Estás gastando ${deficit:.2f} más de lo que ganas\")\n    print(f\"Necesitas reducir gastos en {abs(porcentaje_ahorro):.1f}%\")\n",
          "solution": "print(\"=== CALCULADORA DE PRESUPUESTO ===\")\n\nsalario_base = float(input(\"Salario base mensual: $\"))\nbonos = float(input(\"Bonos adicionales: $\"))\ningresos_extra = float(input(\"Ingresos extra: $\"))\n\ningresos_totales = salario_base + bonos + ingresos_extra\n\nrenta = float(input(\"\\nRenta/Hipoteca: $\"))\ncomida = float(input(\"Comida: $\"))\ntransporte = float(input(\"Transporte: $\"))\nentretenimiento = float(input(\"Entretenimiento: $\"))\n\ngastos_totales = renta + comida + transporte + entretenimiento\ndiferencia = ingresos_totales - gastos_totales\nporcentaje_ahorro = (diferencia / ingresos_totales) * 100\n\nprint(f\"\\n=== RESUMEN FINANCIERO ===\")\nprint(f\"Ingresos totales: ${ingresos_totales:.2f}\")\nprint(f\"Gastos totales: ${gastos_totales:.2f}\")\nprint(f\"Diferencia: ${diferencia:.2f}\")\n\nif diferencia > 0:\n    print(f\"¡Excelente! Ahorras ${diferencia:.2f} ({porcentaje_ahorro:.1f}%)\")\n    ahorro_anual = diferencia * 12\n    print(f\"Ahorro anual: ${ahorro_anual:.2f}\")\nelse:\n    print(f\"⚠️ Déficit de ${abs(diferencia):.2f}\")",
          "validation": "(code) => code.includes('+') && code.includes('-') && code.includes('*') && code.includes('/')"
        }
      ]
    },

    "operators-comparison": {
      "title": "Operadores de Comparación",
      "sections": [
        {
          "type": "theory",
          "title": "Operadores de Comparación Básicos",
          "content": "Los operadores de comparación te permiten comparar valores y obtener un resultado booleano (True o False):\n\n• **==** (igual a): Verifica si dos valores son iguales\n• **!=** (diferente de): Verifica si dos valores son diferentes\n• **<** (menor que): Verifica si el primer valor es menor\n• **>** (mayor que): Verifica si el primer valor es mayor\n• **<=** (menor o igual): Menor que o igual\n• **>=** (mayor o igual): Mayor que o igual",
          "example": "# Comparaciones numéricas\na = 10\nb = 20\nc = 10\n\nprint(f\"{a} == {b}: {a == b}\")  # False\nprint(f\"{a} == {c}: {a == c}\")  # True\nprint(f\"{a} != {b}: {a != b}\")  # True\nprint(f\"{a} < {b}: {a < b}\")    # True\nprint(f\"{a} > {b}: {a > b}\")    # False\nprint(f\"{a} <= {c}: {a <= c}\")  # True\nprint(f\"{a} >= {c}: {a >= c}\")  # True\n\n# Comparaciones con strings\nnombre1 = \"Ana\"\nnombre2 = \"Pedro\"\nprint(f\"'{nombre1}' == '{nombre2}': {nombre1 == nombre2}\")  # False\nprint(f\"'{nombre1}' != '{nombre2}': {nombre1 != nombre2}\")  # True"
        },
        {
          "type": "theory",
          "title": "Comparaciones con Strings",
          "content": "Python puede comparar strings de varias maneras interesantes:\n\n• **Igualdad**: Compara carácter por carácter\n• **Orden lexicográfico**: Como en un diccionario\n• **Case sensitive**: Distingue mayúsculas y minúsculas\n• **Métodos útiles**: .lower(), .upper() para comparar sin importar mayúsculas",
          "example": "# Comparaciones de strings\nnombre1 = \"Ana\"\nnombre2 = \"ana\"\nnombre3 = \"Pedro\"\n\n# Case sensitive\nprint(f\"'{nombre1}' == '{nombre2}': {nombre1 == nombre2}\")  # False\n\n# Comparar sin importar mayúsculas\nprint(f\"Ignorando mayúsculas: {nombre1.lower() == nombre2.lower()}\")  # True\n\n# Orden lexicográfico (alfabético)\nprint(f\"'{nombre1}' < '{nombre3}': {nombre1 < nombre3}\")  # True\nprint(f\"'apple' < 'banana': {'apple' < 'banana'}\")  # True\n\n# Verificar contenido\nfrase = \"Hola mundo\"\nprint(f\"'mundo' in '{frase}': {'mundo' in frase}\")  # True\nprint(f\"'MUNDO' in '{frase}': {'MUNDO' in frase}\")  # False\n\n# Verificar inicio y final\nemail = \"usuario@gmail.com\"\nprint(f\"Termina en '.com': {email.endswith('.com')}\")  # True\nprint(f\"Empieza con 'usuario': {email.startswith('usuario')}\")  # True"
        },
        {
          "type": "theory",
          "title": "Comparaciones Encadenadas",
          "content": "Python permite encadenar múltiples comparaciones de forma elegante, algo que no es común en otros lenguajes:\n\n• **a < b < c**: Verifica que b esté entre a y c\n• **a == b == c**: Verifica que todos sean iguales\n• **a != b != c**: Verifica que todos sean diferentes entre sí\n\nEsto hace el código más legible y pythónico.",
          "example": "# Comparaciones encadenadas\nedad = 25\nsalario = 50000\nnota = 85\n\n# Verificar rangos\nprint(f\"Edad entre 18 y 65: {18 <= edad <= 65}\")  # True\nprint(f\"Salario entre 30k y 100k: {30000 <= salario <= 100000}\")  # True\nprint(f\"Nota entre 0 y 100: {0 <= nota <= 100}\")  # True\n\n# Múltiples igualdades\na = b = c = 10\nprint(f\"Todos iguales: {a == b == c}\")  # True\n\n# Verificar orden\nx, y, z = 1, 5, 10\nprint(f\"En orden ascendente: {x < y < z}\")  # True\n\n# Ejemplo práctico: validar entrada\ntemperatura = float(input(\"Temperatura: \"))\nif -50 <= temperatura <= 50:\n    print(\"Temperatura normal\")\nelse:\n    print(\"Temperatura extrema\")"
        },
        {
          "type": "exercise",
          "title": "Ejercicio: Sistema de Calificaciones Avanzado",
          "description": "Crea un sistema que evalúe estudiantes basado en múltiples criterios: edad, promedio de notas, asistencia y conducta. Usa comparaciones encadenadas y diferentes tipos de operadores.",
          "startingCode": "# Sistema de Evaluación de Estudiantes\n\nprint(\"=== SISTEMA DE EVALUACIÓN ESTUDIANTIL ===\")\n\n# Solicitar información del estudiante\nnombre = input(\"Nombre del estudiante: \")\nedad = int(input(\"Edad: \"))\npromedio = float(input(\"Promedio de notas (0-100): \"))\nasistencia = float(input(\"Porcentaje de asistencia (0-100): \"))\nconducta = input(\"Conducta (Excelente/Buena/Regular/Mala): \")\n\nprint(f\"\\n=== EVALUACIÓN DE {nombre.upper()} ===\")\n\n# Verificar edad apropiada\nedad_apropiada = 15 <= edad <= 18\nprint(f\"Edad apropiada (15-18): {edad_apropiada}\")\n\n# Evaluar promedio académico\nif promedio >= 90:\n    nivel_academico = \"Sobresaliente\"\nelif promedio >= 80:\n    nivel_academico = \"Satisfactorio\"\nelif promedio >= 70:\n    nivel_academico = \"Aceptable\"\nelse:\n    nivel_academico = \"Necesita mejorar\"\n\nprint(f\"Nivel académico: {nivel_academico} ({promedio}%)\")\n\n# Evaluar asistencia\nasistencia_buena = asistencia >= 85\nprint(f\"Asistencia adecuada (>=85%): {asistencia_buena} ({asistencia}%)\")\n\n# Evaluar conducta\nconducta_buena = conducta.lower() in [\"excelente\", \"buena\"]\nprint(f\"Conducta satisfactoria: {conducta_buena} ({conducta})\")\n\n# Determinar si el estudiante está en buen standing\nbuen_standing = (\n    edad_apropiada and \n    promedio >= 70 and \n    asistencia >= 85 and \n    conducta_buena\n)\n\nprint(f\"\\n=== RESULTADO FINAL ===\")\nprint(f\"Estudiante en buen standing: {buen_standing}\")\n\n# Recomendaciones específicas\nif not buen_standing:\n    print(\"\\n=== ÁREAS DE MEJORA ===\")\n    if not edad_apropiada:\n        print(\"• Verificar nivel educativo apropiado\")\n    if promedio < 70:\n        print(\"• Mejorar rendimiento académico\")\n    if asistencia < 85:\n        print(\"• Mejorar asistencia a clases\")\n    if not conducta_buena:\n        print(\"• Trabajar en comportamiento\")\nelse:\n    print(\"¡Felicitaciones! Estudiante ejemplar.\")\n    \n    # Verificar si califica para honores\n    if promedio >= 95 and asistencia >= 95 and conducta.lower() == \"excelente\":\n        print(\"🏆 ¡Califica para el cuadro de honor!\")\n",
          "solution": "print(\"=== SISTEMA DE EVALUACIÓN ESTUDIANTIL ===\")\n\nnombre = input(\"Nombre del estudiante: \")\nedad = int(input(\"Edad: \"))\npromedio = float(input(\"Promedio de notas (0-100): \"))\nasistencia = float(input(\"Porcentaje de asistencia (0-100): \"))\nconducta = input(\"Conducta (Excelente/Buena/Regular/Mala): \")\n\nprint(f\"\\n=== EVALUACIÓN DE {nombre.upper()} ===\")\n\nedad_apropiada = 15 <= edad <= 18\nprint(f\"Edad apropiada (15-18): {edad_apropiada}\")\n\nif promedio >= 90:\n    nivel_academico = \"Sobresaliente\"\nelif promedio >= 80:\n    nivel_academico = \"Satisfactorio\"\nelif promedio >= 70:\n    nivel_academico = \"Aceptable\"\nelse:\n    nivel_academico = \"Necesita mejorar\"\n\nprint(f\"Nivel académico: {nivel_academico} ({promedio}%)\")\n\nasistencia_buena = asistencia >= 85\nprint(f\"Asistencia adecuada: {asistencia_buena} ({asistencia}%)\")\n\nconducta_buena = conducta.lower() in [\"excelente\", \"buena\"]\nprint(f\"Conducta satisfactoria: {conducta_buena}\")\n\nbuen_standing = edad_apropiada and promedio >= 70 and asistencia >= 85 and conducta_buena\nprint(f\"\\nEstudiante en buen standing: {buen_standing}\")",
          "validation": "(code) => code.includes('<=') && code.includes('>=') && code.includes('==') && code.includes('and')"
        }
      ]
    },

    "operators-logical": {
      "title": "Operadores Lógicos",
      "sections": [
        {
          "type": "theory",
          "title": "Operadores Lógicos Básicos",
          "content": "Los operadores lógicos te permiten combinar expresiones booleanas para crear condiciones más complejas:\n\n• **and**: Devuelve True solo si ambas expresiones son True\n• **or**: Devuelve True si al menos una expresión es True\n• **not**: Invierte el valor booleano (True → False, False → True)\n\nEstos operadores siguen la lógica matemática y son fundamentales para el control de flujo.",
          "example": "# Operadores lógicos básicos\na = True\nb = False\nc = True\n\nprint(f\"and - Ambos verdaderos:\")\nprint(f\"{a} and {c} = {a and c}\")    # True\nprint(f\"{a} and {b} = {a and b}\")    # False\n\nprint(f\"\\nor - Al menos uno verdadero:\")\nprint(f\"{a} or {b} = {a or b}\")      # True\nprint(f\"{b} or {b} = {b or b}\")      # False\n\nprint(f\"\\nnot - Inverso:\")\nprint(f\"not {a} = {not a}\")         # False\nprint(f\"not {b} = {not b}\")         # True\n\n# Ejemplo práctico\nedad = 20\ntiene_licencia = True\n\npuede_conducir = edad >= 18 and tiene_licencia\nprint(f\"\\nPuede conducir: {puede_conducir}\")"
        },
        {
          "type": "theory",
          "title": "Cortocircuito en Evaluación",
          "content": "Python usa evaluación de cortocircuito con operadores lógicos:\n\n• **and**: Si la primera expresión es False, no evalúa la segunda\n• **or**: Si la primera expresión es True, no evalúa la segunda\n\nEsto es útil para optimización y para evitar errores cuando una condición depende de otra.",
          "example": "# Cortocircuito con and\nnum = 0\nprint(\"Ejemplo de cortocircuito con 'and':\")\n\n# Si num es 0, no evalúa la división\nresultado = num != 0 and 10 / num > 5\nprint(f\"num != 0 and 10/num > 5: {resultado}\")  # False (no hay error)\n\n# Sin cortocircuito esto daría error:\n# resultado = 10 / num > 5 and num != 0  # ZeroDivisionError\n\n# Cortocircuito con or\nusuario_activo = True\nprint(f\"\\nEjemplo de cortocircuito con 'or':\")\n\n# Si usuario_activo es True, no verifica la segunda condición\nacceso = usuario_activo or verificar_password()\nprint(f\"Acceso concedido: {usuario_activo}\")  # True\n\n# Ejemplo práctico: verificar lista\nlista = [1, 2, 3]\nif lista and lista[0] > 0:  # Primero verifica que lista no esté vacía\n    print(\"Lista válida con primer elemento positivo\")"
        },
        {
          "type": "theory",
          "title": "Truthiness en Python",
          "content": "En Python, todos los valores tienen un valor de verdad (truthiness):\n\n**Valores que se evalúan como False:**\n• False, None\n• 0, 0.0\n• Cadenas vacías: \"\", ''\n• Colecciones vacías: [], {}, ()\n\n**Valores que se evalúan como True:**\n• Cualquier número diferente de cero\n• Cadenas no vacías\n• Colecciones no vacías\n• True",
          "example": "# Truthiness de diferentes valores\nvalores = [0, 1, \"\", \"hola\", [], [1, 2], None, True, False]\n\nprint(\"Valor\\t\\t→ bool()\")\nprint(\"-\" * 25)\nfor valor in valores:\n    print(f\"{repr(valor):<12} → {bool(valor)}\")\n\n# Uso práctico\nnombre = input(\"Tu nombre (opcional): \")\nif nombre:  # En lugar de: if nombre != \"\"\n    print(f\"Hola, {nombre}!\")\nelse:\n    print(\"Hola, usuario anónimo!\")\n\n# Verificar lista\ncarrito = []\nif carrito:\n    print(f\"Tienes {len(carrito)} productos\")\nelse:\n    print(\"Tu carrito está vacío\")\n\n# Operador or para valores por defecto\nnombre_usuario = nombre or \"Usuario Anónimo\"\nprint(f\"Bienvenido, {nombre_usuario}\")"
        },
        {
          "type": "exercise",
          "title": "Ejercicio: Sistema de Acceso y Permisos",
          "description": "Crea un sistema que determine los permisos de acceso de un usuario basado en múltiples condiciones: autenticación, rol, horario y ubicación. Usa todos los operadores lógicos.",
          "startingCode": "# Sistema de Control de Acceso\n\nprint(\"=== SISTEMA DE CONTROL DE ACCESO ===\")\n\n# Información del usuario\nusuario = input(\"Nombre de usuario: \")\npassword = input(\"Contraseña: \")\nrol = input(\"Rol (admin/usuario/invitado): \").lower()\nhora_actual = int(input(\"Hora actual (0-23): \"))\nubicacion = input(\"Ubicación (oficina/remoto/publico): \").lower()\nes_dia_laborable = input(\"¿Es día laborable? (si/no): \").lower() == \"si\"\n\nprint(f\"\\n=== VERIFICACIÓN DE ACCESO PARA {usuario.upper()} ===\")\n\n# 1. Verificar autenticación básica\ncredenciales_validas = usuario and password and len(password) >= 6\nprint(f\"Credenciales válidas: {credenciales_validas}\")\n\n# 2. Verificar rol válido\nroles_validos = [\"admin\", \"usuario\", \"invitado\"]\nrol_valido = rol in roles_validos\nprint(f\"Rol válido: {rol_valido} ({rol})\")\n\n# 3. Verificar horario de acceso\n# Admins: 24/7, Usuarios: 6-22 en días laborables, 8-20 fines de semana\n# Invitados: solo 9-17 en días laborables\nif rol == \"admin\":\n    horario_valido = True  # 24/7\nelif rol == \"usuario\":\n    if es_dia_laborable:\n        horario_valido = 6 <= hora_actual <= 22\n    else:\n        horario_valido = 8 <= hora_actual <= 20\nelif rol == \"invitado\":\n    horario_valido = es_dia_laborable and 9 <= hora_actual <= 17\nelse:\n    horario_valido = False\n\nprint(f\"Horario válido: {horario_valido} (hora: {hora_actual})\")\n\n# 4. Verificar ubicación\n# Admins: cualquier ubicación\n# Usuarios: oficina o remoto (no público)\n# Invitados: solo oficina\nif rol == \"admin\":\n    ubicacion_valida = ubicacion in [\"oficina\", \"remoto\", \"publico\"]\nelif rol == \"usuario\":\n    ubicacion_valida = ubicacion in [\"oficina\", \"remoto\"]\nelif rol == \"invitado\":\n    ubicacion_valida = ubicacion == \"oficina\"\nelse:\n    ubicacion_valida = False\n\nprint(f\"Ubicación válida: {ubicacion_valida} ({ubicacion})\")\n\n# 5. Determinar acceso final\nacceso_concedido = (\n    credenciales_validas and \n    rol_valido and \n    horario_valido and \n    ubicacion_valida\n)\n\nprint(f\"\\n=== RESULTADO FINAL ===\")\nprint(f\"Acceso concedido: {acceso_concedido}\")\n\nif acceso_concedido:\n    print(f\"🟢 Bienvenido, {usuario}!\")\n    \n    # Permisos específicos según rol\n    if rol == \"admin\":\n        print(\"Permisos: Administración completa\")\n    elif rol == \"usuario\":\n        print(\"Permisos: Acceso estándar\")\n    else:  # invitado\n        print(\"Permisos: Solo lectura\")\nelse:\n    print(\"🔴 Acceso denegado\")\n    \n    # Mostrar razones específicas\n    print(\"\\n=== RAZONES DE DENEGACIÓN ===\")\n    if not credenciales_validas:\n        print(\"• Credenciales inválidas\")\n    if not rol_valido:\n        print(\"• Rol no reconocido\")\n    if not horario_valido:\n        print(\"• Fuera del horario permitido\")\n    if not ubicacion_valida:\n        print(\"• Ubicación no autorizada\")\n",
          "solution": "print(\"=== SISTEMA DE CONTROL DE ACCESO ===\")\n\nusuario = input(\"Nombre de usuario: \")\npassword = input(\"Contraseña: \")\nrol = input(\"Rol (admin/usuario/invitado): \").lower()\nhora_actual = int(input(\"Hora actual (0-23): \"))\nubicacion = input(\"Ubicación (oficina/remoto/publico): \").lower()\nes_dia_laborable = input(\"¿Es día laborable? (si/no): \").lower() == \"si\"\n\nprint(f\"\\n=== VERIFICACIÓN DE ACCESO PARA {usuario.upper()} ===\")\n\ncredenciales_validas = usuario and password and len(password) >= 6\nprint(f\"Credenciales válidas: {credenciales_validas}\")\n\nroles_validos = [\"admin\", \"usuario\", \"invitado\"]\nrol_valido = rol in roles_validos\nprint(f\"Rol válido: {rol_valido} ({rol})\")\n\nif rol == \"admin\":\n    horario_valido = True\nelif rol == \"usuario\":\n    horario_valido = (6 <= hora_actual <= 22) if es_dia_laborable else (8 <= hora_actual <= 20)\nelse:\n    horario_valido = es_dia_laborable and 9 <= hora_actual <= 17\n\nprint(f\"Horario válido: {horario_valido}\")\n\nif rol == \"admin\":\n    ubicacion_valida = ubicacion in [\"oficina\", \"remoto\", \"publico\"]\nelif rol == \"usuario\":\n    ubicacion_valida = ubicacion in [\"oficina\", \"remoto\"]\nelse:\n    ubicacion_valida = ubicacion == \"oficina\"\n\nacceso_concedido = credenciales_validas and rol_valido and horario_valido and ubicacion_valida\nprint(f\"\\nAcceso concedido: {acceso_concedido}\")",
          "validation": "(code) => code.includes('and') && code.includes('or') && code.includes('not') && code.includes('in')"
        }
      ]
    },

    "conditionals-basic": {
      "title": "Estructuras Condicionales",
      "sections": [
        {
          "type": "theory",
          "title": "Estructura if-elif-else",
          "content": "Las estructuras condicionales permiten que tu programa tome decisiones basadas en condiciones. Python usa indentación para definir bloques de código:\n\n• **if**: Ejecuta código si la condición es verdadera\n• **elif**: (else if) Condición alternativa si la anterior fue falsa\n• **else**: Ejecuta si ninguna condición anterior fue verdadera\n\nLa indentación (espacios al inicio) es obligatoria y define qué código pertenece a cada bloque.",
          "example": "# Estructura condicional básica\nedad = int(input(\"¿Cuál es tu edad? \"))\n\nif edad < 13:\n    categoria = \"niño\"\n    actividades = \"juegos infantiles\"\nelif edad < 18:\n    categoria = \"adolescente\"\n    actividades = \"deportes y estudios\"\nelif edad < 65:\n    categoria = \"adulto\"\n    actividades = \"trabajo y familia\"\nelse:\n    categoria = \"adulto mayor\"\n    actividades = \"descanso y sabiduría\"\n\nprint(f\"Eres un {categoria}\")\nprint(f\"Actividades recomendadas: {actividades}\")\n\n# Condicional simple\nif edad >= 18:\n    print(\"Puedes votar en las elecciones\")\n    print(\"También puedes obtener una licencia de conducir\")"
        },
        {
          "type": "theory",
          "title": "Condiciones Complejas",
          "content": "Puedes crear condiciones más sofisticadas combinando operadores de comparación y lógicos:\n\n• Usar **and**, **or**, **not** para combinar condiciones\n• Agrupar condiciones con **paréntesis**\n• Verificar **pertenencia** con **in**\n• Usar **comparaciones encadenadas**\n\nEsto permite crear lógica de decisión muy específica y poderosa.",
          "example": "# Condiciones complejas\nusuario = input(\"Usuario: \")\npassword = input(\"Contraseña: \")\nedad = int(input(\"Edad: \"))\npais = input(\"País: \").lower()\n\n# Verificar múltiples condiciones\nif (usuario and password and \n    len(password) >= 8 and \n    edad >= 18 and \n    pais in [\"mexico\", \"españa\", \"argentina\"]):\n    \n    print(\"✅ Registro exitoso\")\n    \n    # Condiciones anidadas\n    if edad >= 65:\n        print(\"🎁 Califica para descuento de tercera edad\")\n    elif pais == \"mexico\":\n        print(\"🇲🇽 Bienvenido usuario mexicano\")\n        \nelse:\n    print(\"❌ No cumples los requisitos\")\n    \n    # Mostrar qué falta\n    if not usuario:\n        print(\"• Falta nombre de usuario\")\n    if not password or len(password) < 8:\n        print(\"• Contraseña debe tener al menos 8 caracteres\")\n    if edad < 18:\n        print(\"• Debes ser mayor de edad\")\n    if pais not in [\"mexico\", \"españa\", \"argentina\"]:\n        print(\"• Servicio no disponible en tu país\")"
        },
        {
          "type": "theory",
          "title": "Expresiones Ternarias",
          "content": "Python permite escribir condicionales simples en una sola línea usando expresiones ternarias:\n\n**Sintaxis**: `valor_si_true if condicion else valor_si_false`\n\nSon útiles para asignaciones simples o cuando necesitas un valor basado en una condición. No abuses de ellas; úsalas solo para casos simples.",
          "example": "# Expresiones ternarias\nedad = int(input(\"Tu edad: \"))\n\n# En lugar de:\n# if edad >= 18:\n#     estado = \"mayor\"\n# else:\n#     estado = \"menor\"\n\n# Puedes escribir:\nestado = \"mayor\" if edad >= 18 else \"menor\"\nprint(f\"Eres {estado} de edad\")\n\n# Más ejemplos\nnota = float(input(\"Tu nota: \"))\nresultado = \"Aprobado\" if nota >= 60 else \"Reprobado\"\nprint(f\"Resultado: {resultado}\")\n\n# Para valores numéricos\ntemperatura = float(input(\"Temperatura: \"))\nclima = \"calor\" if temperatura > 25 else \"frío\" if temperatura < 15 else \"templado\"\nprint(f\"Hace {clima}\")\n\n# En funciones\ndef max_de_dos(a, b):\n    return a if a > b else b\n\nprint(f\"Mayor entre 5 y 3: {max_de_dos(5, 3)}\")\n\n# Con strings\nmensaje = \"Buenos días\" if datetime.now().hour < 12 else \"Buenas tardes\""
        },
        {
          "type": "exercise",
          "title": "Ejercicio: Sistema de Recomendación de Películas",
          "description": "Crea un sistema que recomiende películas basado en edad, género preferido, estado de ánimo y tiempo disponible. Usa condicionales anidados, expresiones ternarias y condiciones complejas.",
          "startingCode": "# Sistema de Recomendación de Películas\n\nprint(\"🎬 === RECOMENDADOR DE PELÍCULAS === 🎬\")\nprint(\"Te ayudaré a encontrar la película perfecta!\\n\")\n\n# Recopilar información del usuario\nnombre = input(\"¿Cómo te llamas? \")\nedad = int(input(\"¿Cuál es tu edad? \"))\ngenero_preferido = input(\"Género preferido (accion/comedia/drama/terror/romance/sci-fi): \").lower()\nestado_animo = input(\"¿Cómo te sientes? (feliz/triste/estresado/aburrido/nostalgico): \").lower()\ntiempo_disponible = int(input(\"¿Cuántos minutos tienes disponibles? \"))\ncompania = input(\"¿Verás la película? (solo/pareja/familia/amigos): \").lower()\n\nprint(f\"\\n¡Perfecto {nombre}! Déjame pensar...\")\nprint(\"🤔 Analizando tus preferencias...\\n\")\n\n# Determinar restricciones por edad\nif edad < 13:\n    contenido_apropiado = [\"comedia\", \"familia\"]\n    clasificacion = \"Para toda la familia\"\nelif edad < 17:\n    contenido_apropiado = [\"comedia\", \"drama\", \"romance\", \"sci-fi\", \"familia\"]\n    clasificacion = \"Teen\"\nelse:\n    contenido_apropiado = [\"accion\", \"comedia\", \"drama\", \"terror\", \"romance\", \"sci-fi\"]\n    clasificacion = \"Para adultos\"\n\nprint(f\"Clasificación apropiada: {clasificacion}\")\n\n# Ajustar género según estado de ánimo\nif estado_animo == \"triste\":\n    if genero_preferido == \"terror\":\n        genero_ajustado = \"comedia\"\n        print(\"💡 Cambié terror por comedia para animarte\")\n    else:\n        genero_ajustado = genero_preferido\nelif estado_animo == \"estresado\":\n    genero_ajustado = \"comedia\" if genero_preferido != \"comedia\" else \"comedia\"\n    if genero_preferido != \"comedia\":\n        print(\"💡 Recomiendo comedia para relajarte\")\nelif estado_animo == \"aburrido\":\n    genero_ajustado = \"accion\" if \"accion\" in contenido_apropiado else genero_preferido\n    if genero_ajustado != genero_preferido:\n        print(\"💡 Acción para combatir el aburrimiento\")\nelse:\n    genero_ajustado = genero_preferido\n\n# Verificar que el género ajustado sea apropiado para la edad\nif genero_ajustado not in contenido_apropiado:\n    genero_ajustado = \"comedia\"  # Género seguro\n    print(f\"💡 Cambiando a comedia (apropiado para tu edad)\")\n\nprint(f\"Género seleccionado: {genero_ajustado}\")\n\n# Determinar duración de película\nif tiempo_disponible < 90:\n    duracion = \"corta (< 90 min)\"\n    tipo_contenido = \"episodio de serie\"\nelif tiempo_disponible < 120:\n    duracion = \"normal (90-120 min)\"\n    tipo_contenido = \"película estándar\"\nelse:\n    duracion = \"épica (> 120 min)\"\n    tipo_contenido = \"película épica\"\n\nprint(f\"Duración recomendada: {duracion}\")\n\n# Ajustar según compañía\nif compania == \"familia\":\n    recomendacion_social = \"película familiar\"\n    if genero_ajustado == \"terror\":\n        genero_ajustado = \"comedia\"\n        print(\"💡 Cambiando a comedia para ver en familia\")\nelif compania == \"pareja\":\n    recomendacion_social = \"película romántica\" if genero_ajustado != \"terror\" else \"thriller romántico\"\nelif compania == \"amigos\":\n    recomendacion_social = \"película divertida para grupo\"\nelse:  # solo\n    recomendacion_social = \"película personal\"\n\nprint(f\"Contexto social: {recomendacion_social}\")\n\n# Generar recomendación final\nprint(f\"\\n🎯 === RECOMENDACIÓN FINAL PARA {nombre.upper()} ===\")\nprint(f\"Género: {genero_ajustado.title()}\")\nprint(f\"Duración: {duracion}\")\nprint(f\"Contexto: {recomendacion_social}\")\nprint(f\"Estado de ánimo considerado: {estado_animo}\")\n\n# Recomendaciones específicas por género\nif genero_ajustado == \"accion\":\n    pelicula = \"Mad Max: Fury Road\" if tiempo_disponible >= 120 else \"John Wick\"\nelif genero_ajustado == \"comedia\":\n    pelicula = \"The Grand Budapest Hotel\" if compania == \"solo\" else \"Toy Story\"\nelif genero_ajustado == \"drama\":\n    pelicula = \"The Shawshank Redemption\" if tiempo_disponible >= 120 else \"Her\"\nelif genero_ajustado == \"terror\":\n    pelicula = \"Hereditary\" if edad >= 18 else \"Monster House\"\nelif genero_ajustado == \"romance\":\n    pelicula = \"The Princess Bride\" if compania == \"familia\" else \"Before Sunrise\"\nelif genero_ajustado == \"sci-fi\":\n    pelicula = \"Blade Runner 2049\" if tiempo_disponible >= 120 else \"Ex Machina\"\nelse:\n    pelicula = \"Una película sorpresa\"\n\nprint(f\"\\n🍿 Película recomendada: {pelicula}\")\n\n# Mensaje final personalizado\nif estado_animo == \"triste\":\n    print(\"¡Espero que esta película te haga sonreír! 😊\")\nelif estado_animo == \"estresado\":\n    print(\"Relájate y disfruta. Te ayudará a desestresarte 🧘\")\nelif estado_animo == \"aburrido\":\n    print(\"¡Esta película definitivamente te mantendrá entretenido! 🚀\")\nelse:\n    print(\"¡Disfruta tu película! 🎬✨\")\n",
          "solution": "print(\"🎬 === RECOMENDADOR DE PELÍCULAS === 🎬\")\n\nnombre = input(\"¿Cómo te llamas? \")\nedad = int(input(\"¿Cuál es tu edad? \"))\ngenero_preferido = input(\"Género preferido (accion/comedia/drama/terror/romance/sci-fi): \").lower()\nestado_animo = input(\"¿Cómo te sientes? (feliz/triste/estresado/aburrido): \").lower()\ntiempo_disponible = int(input(\"¿Cuántos minutos tienes? \"))\ncompania = input(\"¿Con quién verás la película? (solo/pareja/familia/amigos): \").lower()\n\nprint(f\"\\n¡Perfecto {nombre}! Analizando...\\n\")\n\nif edad < 13:\n    contenido_apropiado = [\"comedia\", \"familia\"]\nelif edad < 17:\n    contenido_apropiado = [\"comedia\", \"drama\", \"romance\", \"sci-fi\"]\nelse:\n    contenido_apropiado = [\"accion\", \"comedia\", \"drama\", \"terror\", \"romance\", \"sci-fi\"]\n\ngenero_ajustado = \"comedia\" if estado_animo == \"triste\" and genero_preferido == \"terror\" else genero_preferido\n\nif genero_ajustado not in contenido_apropiado:\n    genero_ajustado = \"comedia\"\n\nduracion = \"corta\" if tiempo_disponible < 90 else \"normal\" if tiempo_disponible < 120 else \"épica\"\n\nif compania == \"familia\" and genero_ajustado == \"terror\":\n    genero_ajustado = \"comedia\"\n\nprint(f\"🎯 RECOMENDACIÓN PARA {nombre.upper()}\")\nprint(f\"Género: {genero_ajustado.title()}\")\nprint(f\"Duración: {duracion}\")\nprint(f\"¡Disfruta tu película! 🎬\")",
          "validation": "(code) => code.includes('if') && code.includes('elif') && code.includes('else') && code.includes('and')"
        }
      ]
    },

    "loops-for": {
      "title": "Bucles For",
      "sections": [
        {
          "type": "theory",
          "title": "Introducción al Bucle For",
          "content": "El bucle for se usa para iterar sobre secuencias (listas, strings, rangos). Es perfecto cuando sabes cuántas veces quieres repetir algo o cuando tienes una colección de elementos.\n\nSintaxis básica:\nfor variable in secuencia:\n    # código a repetir",
          "example": "# Iterar sobre una lista\nfrutas = [\"manzana\", \"banana\", \"naranja\"]\nfor fruta in frutas:\n    print(f\"Me gusta la {fruta}\")\n\n# Iterar sobre un string\nnombre = \"Python\"\nfor letra in nombre:\n    print(f\"Letra: {letra}\")\n\n# Iterar con números\nfor numero in [1, 2, 3, 4, 5]:\n    print(f\"Número: {numero}\")"
        },
        {
          "type": "theory",
          "title": "La función range()",
          "content": "range() genera secuencias de números. Es muy útil con bucles for:\n\n• range(n): números de 0 a n-1\n• range(inicio, fin): números de inicio a fin-1\n• range(inicio, fin, paso): con incremento personalizado",
          "example": "# range básico\nfor i in range(5):\n    print(i)  # 0, 1, 2, 3, 4\n\n# range con inicio y fin\nfor i in range(2, 8):\n    print(i)  # 2, 3, 4, 5, 6, 7\n\n# range con paso\nfor i in range(0, 10, 2):\n    print(i)  # 0, 2, 4, 6, 8\n\n# range descendente\nfor i in range(10, 0, -1):\n    print(i)  # 10, 9, 8, ..., 1"
        },
        {
          "type": "exercise",
          "title": "Ejercicio: Tabla de Multiplicar",
          "description": "Crea un programa que genere la tabla de multiplicar de un número del 1 al 10.",
          "startingCode": "# Tabla de multiplicar\nnumero = int(input(\"¿De qué número quieres la tabla? \"))\n\nprint(f\"\\nTabla del {numero}:\")\nprint(\"-\" * 20)\n\n# Usa un bucle for con range(1, 11) para generar la tabla\n",
          "solution": "numero = int(input(\"¿De qué número quieres la tabla? \"))\n\nprint(f\"\\nTabla del {numero}:\")\nprint(\"-\" * 20)\n\nfor i in range(1, 11):\n    resultado = numero * i\n    print(f\"{numero} x {i} = {resultado}\")",
          "validation": "(code) => code.includes('for') && code.includes('range(') && code.includes('*')"
        }
      ]
    },

    "loops-while": {
      "title": "Bucles While",
      "sections": [
        {
          "type": "theory",
          "title": "Introducción al Bucle While",
          "content": "El bucle while ejecuta código mientras una condición sea verdadera. Es útil cuando no sabes exactamente cuántas veces necesitas repetir algo.\n\n⚠️ Cuidado: Asegúrate de que la condición eventualmente se vuelva falsa para evitar bucles infinitos.",
          "example": "# Bucle while básico\ncontador = 0\nwhile contador < 5:\n    print(f\"Contador: {contador}\")\n    contador += 1  # ¡Importante! Cambiar la variable\n\nprint(\"Bucle terminado\")\n\n# Ejemplo práctico\nrespuesta = \"\"\nwhile respuesta != \"salir\":\n    respuesta = input(\"Escribe 'salir' para terminar: \")\n    if respuesta != \"salir\":\n        print(f\"Escribiste: {respuesta}\")"
        },
        {
          "type": "theory",
          "title": "Control de Bucles: break y continue",
          "content": "Python ofrece palabras clave para controlar el flujo de bucles:\n\n• break: Sale completamente del bucle\n• continue: Salta a la siguiente iteración\n• else: Se ejecuta si el bucle termina normalmente (sin break)",
          "example": "# break: salir del bucle\nfor i in range(10):\n    if i == 5:\n        break\n    print(i)  # 0, 1, 2, 3, 4\n\nprint(\"Salió con break\")\n\n# continue: saltar iteración\nfor i in range(5):\n    if i == 2:\n        continue\n    print(i)  # 0, 1, 3, 4\n\n# else en bucles\nfor i in range(3):\n    print(i)\nelse:\n    print(\"Bucle completado sin break\")"
        },
        {
          "type": "exercise",
          "title": "Ejercicio: Juego de Adivinanza",
          "description": "Crea un juego donde el usuario tiene que adivinar un número entre 1 y 10. Usa while y break.",
          "startingCode": "# Juego de adivinanza\nimport random\n\nnumero_secreto = random.randint(1, 10)\nintentos = 0\nmax_intentos = 3\n\nprint(\"¡Adivina el número entre 1 y 10!\")\nprint(f\"Tienes {max_intentos} intentos\")\n\n# Usa while para el bucle principal\n# Usa break cuando adivine o se acaben los intentos\n",
          "solution": "import random\n\nnumero_secreto = random.randint(1, 10)\nintentos = 0\nmax_intentos = 3\n\nprint(\"¡Adivina el número entre 1 y 10!\")\n\nwhile intentos < max_intentos:\n    intento = int(input(f\"Intento {intentos + 1}: \"))\n    intentos += 1\n    \n    if intento == numero_secreto:\n        print(\"¡Correcto! Ganaste\")\n        break\n    elif intento < numero_secreto:\n        print(\"Muy bajo\")\n    else:\n        print(\"Muy alto\")\nelse:\n    print(f\"Game Over. Era {numero_secreto}\")",
          "validation": "(code) => code.includes('while') && code.includes('break') && code.includes('intentos')"
        }
      ]
    },

    "strings-basic": {
      "title": "Strings Básicos",
      "sections": [
        {
          "type": "theory",
          "title": "Creación y Manipulación de Strings",
          "content": "Los strings (cadenas) son secuencias de caracteres. Python ofrece varias formas de crearlos y manipularlos:\n\n• Comillas simples o dobles\n• Strings multilínea con triple comillas\n• Concatenación y repetición\n• Acceso por índice",
          "example": "# Diferentes formas de crear strings\nnombre = \"Python\"\nmensaje = 'Hola mundo'\ntexto_largo = \"\"\"Este es un\ntexto de múltiples\nlíneas\"\"\"\n\n# Concatenación\nsaludo = \"Hola \" + nombre\nprint(saludo)  # \"Hola Python\"\n\n# Repetición\nlinea = \"-\" * 20\nprint(linea)  # \"--------------------\"\n\n# Acceso por índice\nprint(nombre[0])   # \"P\"\nprint(nombre[-1])  # \"n\" (último)"
        },
        {
          "type": "theory",
          "title": "Métodos Útiles de Strings",
          "content": "Los strings tienen muchos métodos incorporados para manipulación:\n\n• upper(), lower(), title(), capitalize()\n• strip(), lstrip(), rstrip()\n• replace(), find(), count()\n• split(), join()",
          "example": "texto = \"  Hola Mundo Python  \"\n\n# Cambiar caso\nprint(texto.upper())      # \"  HOLA MUNDO PYTHON  \"\nprint(texto.lower())      # \"  hola mundo python  \"\nprint(texto.title())      # \"  Hola Mundo Python  \"\n\n# Eliminar espacios\nprint(texto.strip())      # \"Hola Mundo Python\"\n\n# Buscar y reemplazar\nprint(texto.replace(\"Mundo\", \"Universo\"))\nprint(texto.find(\"Python\"))  # posición\nprint(texto.count(\"o\"))      # cantidad"
        },
        {
          "type": "exercise",
          "title": "Ejercicio: Analizador de Texto",
          "description": "Crea un programa que analice un texto: contar palabras, caracteres, y mostrar estadísticas.",
          "startingCode": "# Analizador de texto\ntexto = input(\"Ingresa un texto: \")\n\n# Procesa el texto\ntexto_limpio = texto.strip()\n\n# Calcula estadísticas\n# - Total de caracteres\n# - Total de palabras\n# - Palabra más larga\n# - Mostrar en mayúsculas y minúsculas\n",
          "solution": "texto = input(\"Ingresa un texto: \")\ntexto_limpio = texto.strip()\n\nprint(f\"\\nAnálisis del texto:\")\nprint(f\"Caracteres: {len(texto_limpio)}\")\nprint(f\"Palabras: {len(texto_limpio.split())}\")\nprint(f\"Mayúsculas: {texto_limpio.upper()}\")\nprint(f\"Minúsculas: {texto_limpio.lower()}\")\n\npalabras = texto_limpio.split()\nif palabras:\n    palabra_larga = max(palabras, key=len)\n    print(f\"Palabra más larga: {palabra_larga}\")",
          "validation": "(code) => code.includes('len(') && code.includes('split()') && code.includes('upper()')"
        }
      ]
    },

    "strings-advanced": {
      "title": "Strings Avanzados",
      "sections": [
        {
          "type": "theory",
          "title": "Slicing de Strings",
          "content": "El slicing permite extraer partes específicas de un string:\n\n• [inicio:fin]: desde inicio hasta fin-1\n• [inicio:]: desde inicio hasta el final\n• [:fin]: desde el inicio hasta fin-1\n• [::paso]: con incremento específico",
          "example": "texto = \"Python Programming\"\n\n# Slicing básico\nprint(texto[0:6])    # \"Python\"\nprint(texto[7:])     # \"Programming\"\nprint(texto[:6])     # \"Python\"\n\n# Índices negativos\nprint(texto[-11:])   # \"Programming\"\nprint(texto[:-12])   # \"Python\"\n\n# Con paso\nprint(texto[::2])    # \"Pto rgamn\"\nprint(texto[::-1])   # Reverso: \"gnimmargorP nohtyP\""
        },
        {
          "type": "theory",
          "title": "Formateo Avanzado",
          "content": "Python ofrece múltiples formas de formatear strings:\n\n• f-strings (moderno): f\"Hola {variable}\"\n• .format(): \"Hola {}\".format(variable)\n• Formateo de números y alineación",
          "example": "nombre = \"Ana\"\nedad = 25\nprecio = 19.99\n\n# f-strings\nprint(f\"Hola {nombre}, tienes {edad} años\")\nprint(f\"Precio: ${precio:.2f}\")  # 2 decimales\n\n# .format()\nprint(\"Hola {}, tienes {} años\".format(nombre, edad))\nprint(\"Hola {n}, edad: {e}\".format(n=nombre, e=edad))\n\n# Alineación\nprint(f\"{'Nombre':<10} {'Edad':>5}\")\nprint(f\"{nombre:<10} {edad:>5}\")"
        },
        {
          "type": "exercise",
          "title": "Ejercicio: Generador de Contraseñas",
          "description": "Crea un generador que tome una frase y genere una contraseña usando slicing y métodos de string.",
          "startingCode": "# Generador de contraseñas\nimport random\n\nfrase = input(\"Ingresa una frase memorable: \")\n\n# Procesa la frase para crear contraseña:\n# 1. Toma primera letra de cada palabra\n# 2. Alterna mayúsculas y minúsculas\n# 3. Agrega números al final\n# 4. Reemplaza algunas letras con símbolos\n",
          "solution": "import random\n\nfrase = input(\"Ingresa una frase: \")\npalabras = frase.split()\n\n# Primera letra de cada palabra\npassword = \"\"\nfor i, palabra in enumerate(palabras):\n    letra = palabra[0]\n    if i % 2 == 0:\n        password += letra.upper()\n    else:\n        password += letra.lower()\n\n# Agregar números\npassword += str(random.randint(10, 99))\n\n# Reemplazos\npassword = password.replace('a', '@').replace('o', '0')\n\nprint(f\"Contraseña generada: {password}\")",
          "validation": "(code) => code.includes('split()') && code.includes('[0]') && code.includes('upper()')"
        }
      ]
    },
    "lists-basic": {
      "title": "Listas en Python",
      "sections": [
        {
          "type": "theory",
          "title": "¿Qué son las listas?",
          "content": "Las listas son estructuras de datos que permiten almacenar múltiples elementos en una sola variable. Son ordenadas, mutables (se pueden cambiar) y permiten elementos duplicados.\n\nCaracterísticas principales:\n• Ordenadas: mantienen el orden de inserción\n• Mutables: se pueden modificar después de crearlas\n• Permiten duplicados\n• Pueden contener diferentes tipos de datos",
          "example": "# Crear listas\nfrutas = ['manzana', 'banana', 'naranja']\nnumeros = [1, 2, 3, 4, 5]\nmixta = [1, 'hola', 3.14, True]\nvacia = []\n\n# Acceder a elementos (índices empiezan en 0)\nprint(frutas[0])     # 'manzana'\nprint(frutas[-1])    # 'naranja' (último elemento)\nprint(len(frutas))   # 3 (longitud de la lista)\n\n# Slicing (rebanadas)\nprint(numeros[1:4])  # [2, 3, 4]\nprint(numeros[:3])   # [1, 2, 3]"
        },
        {
          "type": "theory",
          "title": "Métodos básicos de listas",
          "content": "Las listas tienen muchos métodos útiles para manipular sus elementos:\n\n• append(): añade un elemento al final\n• insert(): inserta un elemento en una posición específica\n• remove(): elimina la primera ocurrencia de un elemento\n• pop(): elimina y devuelve un elemento por índice\n• index(): encuentra la posición de un elemento\n• count(): cuenta ocurrencias de un elemento",
          "example": "# Lista inicial\nanimales = ['perro', 'gato', 'pez']\n\n# Agregar elementos\nanimales.append('pájaro')        # ['perro', 'gato', 'pez', 'pájaro']\nanimales.insert(1, 'hamster')    # ['perro', 'hamster', 'gato', 'pez', 'pájaro']\n\n# Eliminar elementos\nanimales.remove('pez')           # elimina 'pez'\neliminado = animales.pop()       # elimina y devuelve el último\neliminado_indice = animales.pop(0)  # elimina el primer elemento\n\n# Buscar elementos\nposicion = animales.index('gato')   # encuentra la posición\nconteo = animales.count('perro')     # cuenta ocurrencias"
        },
        {
          "type": "exercise",
          "title": "Gestor de tareas",
          "description": "Crea un programa que gestione una lista de tareas. Permite agregar tareas, marcar como completadas, eliminar y mostrar todas las tareas.",
          "startingCode": "# Lista de tareas inicial\ntareas = ['estudiar Python', 'hacer ejercicio', 'leer libro']\ncompletadas = []\n\n# Tu código aquí:\n# 1. Mostrar todas las tareas\nprint('=== LISTA DE TAREAS ===')\nfor i, tarea in enumerate(tareas, 1):\n    print(f'{i}. {tarea}')\n\n# 2. Agregar una nueva tarea\n# nueva_tarea = 'comprar comida'\n# tareas.append(nueva_tarea)\n\n# 3. Marcar la primera tarea como completada\n# tarea_completada = tareas.pop(0)\n# completadas.append(tarea_completada)\n\n# 4. Mostrar estado final\n\n",
          "solution": "tareas = ['estudiar Python', 'hacer ejercicio', 'leer libro']\ncompletadas = []\n\nprint('=== LISTA DE TAREAS INICIAL ===')\nfor i, tarea in enumerate(tareas, 1):\n    print(f'{i}. {tarea}')\n\n# Agregar nueva tarea\ntareas.append('comprar comida')\ntareas.append('llamar al doctor')\n\n# Marcar primera tarea como completada\ntarea_completada = tareas.pop(0)\ncompletadas.append(f'✓ {tarea_completada}')\n\n# Mostrar estado final\nprint('\\n=== TAREAS PENDIENTES ===')\nfor i, tarea in enumerate(tareas, 1):\n    print(f'{i}. [ ] {tarea}')\n\nprint('\\n=== TAREAS COMPLETADAS ===')\nfor i, tarea in enumerate(completadas, 1):\n    print(f'{i}. {tarea}')\n\nprint(f'\\nTotal pendientes: {len(tareas)}')\nprint(f'Total completadas: {len(completadas)}')",
          "validation": "(code) => code.includes('append(') && code.includes('pop(') && code.includes('enumerate(')"
        }
      ]
    },
    "dictionaries-basic": {
      "title": "Diccionarios en Python",
      "sections": [
        {
          "type": "theory",
          "title": "¿Qué son los diccionarios?",
          "content": "Los diccionarios son estructuras de datos que almacenan pares clave-valor. Son ideales para asociar información relacionada y acceder a ella de forma rápida.\n\nCaracterísticas principales:\n• No ordenados (Python 3.7+ mantiene orden de inserción)\n• Mutables: se pueden modificar\n• Las claves deben ser únicas\n• Las claves deben ser inmutables (strings, números, tuplas)",
          "example": "# Crear diccionarios\npersona = {\n    'nombre': 'Ana',\n    'edad': 25,\n    'ciudad': 'Madrid',\n    'profesion': 'Programadora'\n}\n\n# Acceder a valores\nprint(persona['nombre'])     # 'Ana'\nprint(persona['edad'])       # 25\n\n# Método get() (más seguro)\nprint(persona.get('telefono', 'No disponible'))  # valor por defecto\n\n# Obtener todas las claves y valores\nprint(persona.keys())        # dict_keys(['nombre', 'edad', 'ciudad', 'profesion'])\nprint(persona.values())      # dict_values(['Ana', 25, 'Madrid', 'Programadora'])"
        },
        {
          "type": "theory",
          "title": "Operaciones con diccionarios",
          "content": "Los diccionarios permiten múltiples operaciones para manipular la información:\n\n• Agregar/modificar elementos\n• Eliminar elementos con del o pop()\n• Iterar sobre claves, valores o ambos\n• Combinar diccionarios\n• Verificar existencia de claves",
          "example": "estudiante = {'nombre': 'Carlos', 'edad': 20}\n\n# Agregar/modificar elementos\nestudiante['carrera'] = 'Informática'    # agregar\nestudiante['edad'] = 21                  # modificar\n\n# Eliminar elementos\ndel estudiante['edad']                   # eliminar con del\ncarrera = estudiante.pop('carrera')      # eliminar y obtener valor\n\n# Iterar sobre diccionario\nfor clave in estudiante:\n    print(f'{clave}: {estudiante[clave]}')\n\n# Iterar sobre claves y valores\nfor clave, valor in estudiante.items():\n    print(f'{clave} -> {valor}')\n\n# Verificar existencia\nif 'nombre' in estudiante:\n    print('El estudiante tiene nombre')"
        },
        {
          "type": "exercise",
          "title": "Sistema de inventario",
          "description": "Crea un sistema de inventario usando diccionarios. Gestiona productos con nombre, precio, cantidad y categoría.",
          "startingCode": "# Inventario inicial\ninventario = {\n    'laptop': {'precio': 800, 'cantidad': 5, 'categoria': 'tecnologia'},\n    'mouse': {'precio': 25, 'cantidad': 20, 'categoria': 'tecnologia'},\n    'libro': {'precio': 15, 'cantidad': 30, 'categoria': 'educacion'}\n}\n\n# Tu código aquí:\n# 1. Mostrar todos los productos\nprint('=== INVENTARIO ===')\nfor producto, info in inventario.items():\n    print(f'{producto.title()}: ${info[\"precio\"]} - Stock: {info[\"cantidad\"]} - {info[\"categoria\"]}')\n\n# 2. Agregar un nuevo producto\n\n# 3. Actualizar cantidad de un producto existente\n\n# 4. Calcular valor total del inventario\n\n",
          "solution": "inventario = {\n    'laptop': {'precio': 800, 'cantidad': 5, 'categoria': 'tecnologia'},\n    'mouse': {'precio': 25, 'cantidad': 20, 'categoria': 'tecnologia'},\n    'libro': {'precio': 15, 'cantidad': 30, 'categoria': 'educacion'}\n}\n\nprint('=== INVENTARIO INICIAL ===')\nfor producto, info in inventario.items():\n    precio = info['precio']\n    cantidad = info['cantidad']\n    categoria = info['categoria']\n    valor_total = precio * cantidad\n    print(f'{producto.title()}: ${precio} x {cantidad} = ${valor_total} ({categoria})')\n\n# Agregar nuevo producto\ninventario['teclado'] = {'precio': 50, 'cantidad': 10, 'categoria': 'tecnologia'}\n\n# Actualizar cantidad (venta de laptops)\ninventario['laptop']['cantidad'] -= 2\n\n# Calcular valor total del inventario\nvalor_total_inventario = 0\nfor producto, info in inventario.items():\n    valor_total_inventario += info['precio'] * info['cantidad']\n\nprint('\\n=== INVENTARIO ACTUALIZADO ===')\nfor producto, info in inventario.items():\n    precio = info['precio']\n    cantidad = info['cantidad']\n    valor_producto = precio * cantidad\n    print(f'{producto.title()}: ${precio} x {cantidad} = ${valor_producto}')\n\nprint(f'\\nValor total del inventario: ${valor_total_inventario}')",
          "validation": "(code) => code.includes('.items()') && code.includes('[') && code.includes('precio') && code.includes('cantidad')"
        }
      ]
    },
    "functions-basic": {
      "title": "Funciones en Python",
      "sections": [
        {
          "type": "theory",
          "title": "¿Qué son las funciones?",
          "content": "Las funciones son bloques de código reutilizables que realizan una tarea específica. Permiten organizar el código, evitar repetición y hacer programas más modulares.\n\nVentajas de las funciones:\n• Reutilización de código\n• Organización y claridad\n• Facilitan el mantenimiento\n• Permiten dividir problemas complejos\n• Facilitan las pruebas",
          "example": "# Función simple sin parámetros\ndef saludar():\n    print('¡Hola, mundo!')\n    print('Bienvenido a Python')\n\n# Llamar la función\nsaludar()\n\n# Función con parámetros\ndef saludar_persona(nombre):\n    print(f'¡Hola, {nombre}!')\n    print('Es un placer conocerte')\n\n# Llamar con argumentos\nsaludar_persona('Ana')\nsaludar_persona('Carlos')\n\n# Función que devuelve un valor\ndef sumar_numeros(a, b):\n    resultado = a + b\n    return resultado\n\n# Usar el valor devuelto\ntotal = sumar_numeros(5, 3)\nprint(f'La suma es: {total}')  # 8"
        },
        {
          "type": "theory",
          "title": "Parámetros y argumentos",
          "content": "Las funciones pueden recibir información a través de parámetros. Python ofrece gran flexibilidad en cómo pasar argumentos:\n\n• Argumentos posicionales\n• Argumentos por palabra clave\n• Valores por defecto\n• Argumentos variables (*args, **kwargs)",
          "example": "# Función con parámetros por defecto\ndef presentar_persona(nombre, edad=25, ciudad='Madrid'):\n    return f'Soy {nombre}, tengo {edad} años y vivo en {ciudad}'\n\n# Diferentes formas de llamar la función\nprint(presentar_persona('Ana'))  # usa valores por defecto\nprint(presentar_persona('Carlos', 30))  # edad personalizada\nprint(presentar_persona('María', 28, 'Barcelona'))  # todos personalizados\n\n# Argumentos por palabra clave\nprint(presentar_persona(ciudad='Valencia', nombre='Luis', edad=35))\n\n# Función con múltiples valores de retorno\ndef calcular_rectangulo(largo, ancho):\n    area = largo * ancho\n    perimetro = 2 * (largo + ancho)\n    return area, perimetro  # devuelve una tupla\n\n# Desempaquetar los valores\narea, perimetro = calcular_rectangulo(5, 3)\nprint(f'Área: {area}, Perímetro: {perimetro}')"
        },
        {
          "type": "exercise",
          "title": "Calculadora con funciones",
          "description": "Crea una calculadora usando funciones. Implementa las cuatro operaciones básicas y una función que las use todas.",
          "startingCode": "# Implementa las funciones de la calculadora\n\ndef sumar(a, b):\n    \"\"\"Suma dos números\"\"\"\n    # Tu código aquí\n    pass\n\ndef restar(a, b):\n    \"\"\"Resta dos números\"\"\"\n    # Tu código aquí\n    pass\n\ndef multiplicar(a, b):\n    \"\"\"Multiplica dos números\"\"\"\n    # Tu código aquí\n    pass\n\ndef dividir(a, b):\n    \"\"\"Divide dos números\"\"\"\n    # Tu código aquí (recuerda manejar división por cero)\n    pass\n\ndef calculadora_completa(num1, num2):\n    \"\"\"Realiza todas las operaciones y muestra los resultados\"\"\"\n    # Tu código aquí\n    pass\n\n# Prueba tu calculadora\n# calculadora_completa(10, 5)\n",
          "solution": "def sumar(a, b):\n    \"\"\"Suma dos números\"\"\"\n    return a + b\n\ndef restar(a, b):\n    \"\"\"Resta dos números\"\"\"\n    return a - b\n\ndef multiplicar(a, b):\n    \"\"\"Multiplica dos números\"\"\"\n    return a * b\n\ndef dividir(a, b):\n    \"\"\"Divide dos números\"\"\"\n    if b != 0:\n        return a / b\n    else:\n        return 'Error: División por cero'\n\ndef calculadora_completa(num1, num2):\n    \"\"\"Realiza todas las operaciones y muestra los resultados\"\"\"\n    print(f'=== CALCULADORA PARA {num1} y {num2} ===')\n    print(f'{num1} + {num2} = {sumar(num1, num2)}')\n    print(f'{num1} - {num2} = {restar(num1, num2)}')\n    print(f'{num1} * {num2} = {multiplicar(num1, num2)}')\n    print(f'{num1} / {num2} = {dividir(num1, num2)}')\n    \n    # Operaciones adicionales\n    promedio = (num1 + num2) / 2\n    print(f'Promedio: {promedio}')\n    \n    return {\n        'suma': sumar(num1, num2),\n        'resta': restar(num1, num2),\n        'multiplicacion': multiplicar(num1, num2),\n        'division': dividir(num1, num2),\n        'promedio': promedio\n    }\n\n# Prueba la calculadora\nresultados = calculadora_completa(10, 5)\ncalculadora_completa(15, 3)\ncalculadora_completa(8, 0)  # prueba división por cero",
          "validation": "(code) => code.includes('def sumar') && code.includes('def restar') && code.includes('def multiplicar') && code.includes('def dividir') && code.includes('return')"
        }
      ]
    },
    "file-handling": {
      "title": "Manejo de Archivos",
      "sections": [
        {
          "type": "theory",
          "title": "Trabajando con archivos",
          "content": "Python permite leer y escribir archivos de forma sencilla. El manejo de archivos es fundamental para guardar datos, configuraciones y resultados.\n\nModos de apertura principales:\n• 'r': lectura (por defecto)\n• 'w': escritura (sobrescribe el archivo)\n• 'a': añadir al final del archivo\n• 'r+': lectura y escritura\n• 'x': creación exclusiva (falla si existe)",
          "example": "# Escribir un archivo\nwith open('mi_archivo.txt', 'w') as archivo:\n    archivo.write('Hola, mundo!\\n')\n    archivo.write('Esta es la segunda línea\\n')\n    archivo.write('Python es genial\\n')\n\nprint('Archivo creado exitosamente')\n\n# Leer todo el archivo\nwith open('mi_archivo.txt', 'r') as archivo:\n    contenido = archivo.read()\n    print('Contenido completo:')\n    print(contenido)\n\n# Leer línea por línea\nwith open('mi_archivo.txt', 'r') as archivo:\n    print('\\nLeyendo línea por línea:')\n    for numero_linea, linea in enumerate(archivo, 1):\n        print(f'Línea {numero_linea}: {linea.strip()}')"
        },
        {
          "type": "theory",
          "title": "Procesamiento de archivos CSV",
          "content": "Los archivos CSV (Comma Separated Values) son muy comunes para almacenar datos tabulares. Python tiene el módulo csv que facilita su manejo.\n\nOperaciones comunes:\n• Leer datos desde CSV\n• Escribir datos a CSV\n• Procesar datos fila por fila\n• Manejar encabezados",
          "example": "import csv\n\n# Datos de ejemplo\nestudiantes = [\n    ['Nombre', 'Edad', 'Carrera', 'Promedio'],\n    ['Ana', 22, 'Informática', 8.5],\n    ['Carlos', 21, 'Ingeniería', 9.0],\n    ['María', 23, 'Matemáticas', 8.8]\n]\n\n# Escribir archivo CSV\nwith open('estudiantes.csv', 'w', newline='') as archivo:\n    escritor = csv.writer(archivo)\n    for fila in estudiantes:\n        escritor.writerow(fila)\n\nprint('Archivo CSV creado')\n\n# Leer archivo CSV\nwith open('estudiantes.csv', 'r') as archivo:\n    lector = csv.reader(archivo)\n    print('\\nContenido del CSV:')\n    for fila in lector:\n        print(f'{fila[0]:<12} {fila[1]:<5} {fila[2]:<12} {fila[3]}')\n\n# Procesar datos (calcular promedio general)\nwith open('estudiantes.csv', 'r') as archivo:\n    lector = csv.reader(archivo)\n    next(lector)  # saltar encabezado\n    total_promedio = 0\n    contador = 0\n    for fila in lector:\n        total_promedio += float(fila[3])\n        contador += 1\n    \n    print(f'\\nPromedio general: {total_promedio/contador:.2f}')"
        },
        {
          "type": "exercise",
          "title": "Sistema de notas",
          "description": "Crea un sistema que guarde las notas de estudiantes en un archivo y permita consultar estadísticas.",
          "startingCode": "# Sistema de gestión de notas\n\n# Datos iniciales de estudiantes\nestudiantes_notas = {\n    'Ana': [8.5, 9.0, 7.5, 8.8],\n    'Carlos': [9.0, 8.5, 9.5, 9.2],\n    'María': [7.8, 8.2, 8.0, 8.5],\n    'Luis': [6.5, 7.0, 7.5, 7.2]\n}\n\n# Función para guardar notas en archivo\ndef guardar_notas(datos, nombre_archivo):\n    \"\"\"Guarda las notas en un archivo de texto\"\"\"\n    # Tu código aquí\n    pass\n\n# Función para cargar notas desde archivo\ndef cargar_notas(nombre_archivo):\n    \"\"\"Carga las notas desde un archivo\"\"\"\n    # Tu código aquí\n    pass\n\n# Función para calcular estadísticas\ndef calcular_estadisticas(datos):\n    \"\"\"Calcula promedio por estudiante y general\"\"\"\n    # Tu código aquí\n    pass\n\n# Prueba tu sistema\n# guardar_notas(estudiantes_notas, 'notas.txt')\n# datos_cargados = cargar_notas('notas.txt')\n# calcular_estadisticas(datos_cargados)\n",
          "solution": "import json\n\nestudiantes_notas = {\n    'Ana': [8.5, 9.0, 7.5, 8.8],\n    'Carlos': [9.0, 8.5, 9.5, 9.2],\n    'María': [7.8, 8.2, 8.0, 8.5],\n    'Luis': [6.5, 7.0, 7.5, 7.2]\n}\n\ndef guardar_notas(datos, nombre_archivo):\n    \"\"\"Guarda las notas en un archivo JSON\"\"\"\n    try:\n        with open(nombre_archivo, 'w') as archivo:\n            json.dump(datos, archivo, indent=2)\n        print(f'Notas guardadas en {nombre_archivo}')\n        return True\n    except Exception as e:\n        print(f'Error al guardar: {e}')\n        return False\n\ndef cargar_notas(nombre_archivo):\n    \"\"\"Carga las notas desde un archivo JSON\"\"\"\n    try:\n        with open(nombre_archivo, 'r') as archivo:\n            datos = json.load(archivo)\n        print(f'Notas cargadas desde {nombre_archivo}')\n        return datos\n    except FileNotFoundError:\n        print(f'Archivo {nombre_archivo} no encontrado')\n        return {}\n    except Exception as e:\n        print(f'Error al cargar: {e}')\n        return {}\n\ndef calcular_estadisticas(datos):\n    \"\"\"Calcula promedio por estudiante y general\"\"\"\n    if not datos:\n        print('No hay datos para procesar')\n        return\n    \n    print('\\n=== ESTADÍSTICAS DE NOTAS ===')\n    todos_promedios = []\n    \n    for estudiante, notas in datos.items():\n        promedio = sum(notas) / len(notas)\n        todos_promedios.append(promedio)\n        nota_max = max(notas)\n        nota_min = min(notas)\n        \n        print(f'{estudiante}:')\n        print(f'  Notas: {notas}')\n        print(f'  Promedio: {promedio:.2f}')\n        print(f'  Nota máxima: {nota_max}')\n        print(f'  Nota mínima: {nota_min}')\n        print()\n    \n    promedio_general = sum(todos_promedios) / len(todos_promedios)\n    print(f'Promedio general del curso: {promedio_general:.2f}')\n    print(f'Mejor estudiante: {max(datos.keys(), key=lambda x: sum(datos[x])/len(datos[x]))}')\n    \n    return {\n        'promedio_general': promedio_general,\n        'promedios_individuales': dict(zip(datos.keys(), todos_promedios))\n    }\n\n# Ejecutar el sistema\nprint('=== SISTEMA DE GESTIÓN DE NOTAS ===')\nguardar_notas(estudiantes_notas, 'notas.json')\ndatos_cargados = cargar_notas('notas.json')\nestadisticas = calcular_estadisticas(datos_cargados)",
          "validation": "(code) => code.includes('open(') && code.includes('with') && code.includes('def ') && (code.includes('json') || code.includes('write') || code.includes('read'))"
        }
      ]
    },
    "error-handling": {
      "title": "Manejo de Errores",
      "sections": [
        {
          "type": "theory",
          "title": "¿Por qué manejar errores?",
          "content": "Los errores son inevitables en programación. Un buen manejo de errores hace que nuestros programas sean más robustos y proporcionen mejor experiencia al usuario.\n\nTipos comunes de errores:\n• SyntaxError: errores de sintaxis\n• NameError: variable no definida\n• TypeError: tipo de dato incorrecto\n• ValueError: valor incorrecto\n• FileNotFoundError: archivo no encontrado\n• ZeroDivisionError: división por cero",
          "example": "# Ejemplos de errores comunes\n\n# 1. TypeError - tipo incorrecto\ntry:\n    resultado = '5' + 3  # no se puede sumar string y número\nexcept TypeError as e:\n    print(f'Error de tipo: {e}')\n    resultado = int('5') + 3  # corrección\n    print(f'Resultado corregido: {resultado}')\n\n# 2. ValueError - valor incorrecto\ntry:\n    numero = int('abc')  # 'abc' no es un número válido\nexcept ValueError as e:\n    print(f'Error de valor: {e}')\n    numero = 0  # valor por defecto\n    print(f'Usando valor por defecto: {numero}')\n\n# 3. ZeroDivisionError - división por cero\ntry:\n    division = 10 / 0\nexcept ZeroDivisionError as e:\n    print(f'Error de división: {e}')\n    print('No se puede dividir por cero')"
        },
        {
          "type": "theory",
          "title": "try, except, else, finally",
          "content": "Python usa try-except para capturar y manejar errores. También tenemos else y finally para control adicional:\n\n• try: código que puede generar error\n• except: maneja el error específico\n• else: se ejecuta si NO hay error\n• finally: se ejecuta SIEMPRE\n• raise: lanza un error personalizado",
          "example": "def dividir_numeros(a, b):\n    \"\"\"Función que maneja división con errores\"\"\"\n    try:\n        print(f'Intentando dividir {a} entre {b}')\n        resultado = a / b\n    except ZeroDivisionError:\n        print('Error: No se puede dividir por cero')\n        return None\n    except TypeError:\n        print('Error: Los argumentos deben ser números')\n        return None\n    else:\n        print('División exitosa')\n        return resultado\n    finally:\n        print('Operación de división finalizada')\n\n# Pruebas\nprint('=== PRUEBAS DE DIVISIÓN ===')\nprint(f'Resultado 1: {dividir_numeros(10, 2)}')\nprint(f'Resultado 2: {dividir_numeros(10, 0)}')\nprint(f'Resultado 3: {dividir_numeros(\"10\", 2)}')\n\n# Lanzar errores personalizados\ndef validar_edad(edad):\n    if edad < 0:\n        raise ValueError('La edad no puede ser negativa')\n    if edad > 150:\n        raise ValueError('La edad no puede ser mayor a 150')\n    return True\n\ntry:\n    validar_edad(-5)\nexcept ValueError as e:\n    print(f'Error de validación: {e}')"
        },
        {
          "type": "exercise",
          "title": "Calculadora robusta",
          "description": "Crea una calculadora que maneje todos los posibles errores de entrada y operación.",
          "startingCode": "# Calculadora con manejo robusto de errores\n\ndef obtener_numero(mensaje):\n    \"\"\"Obtiene un número del usuario con validación\"\"\"\n    # Tu código aquí\n    pass\n\ndef realizar_operacion(num1, num2, operador):\n    \"\"\"Realiza operación matemática con manejo de errores\"\"\"\n    # Tu código aquí\n    pass\n\ndef calculadora_principal():\n    \"\"\"Función principal de la calculadora\"\"\"\n    print('=== CALCULADORA ROBUSTA ===')\n    print('Operadores disponibles: +, -, *, /')\n    \n    # Tu código aquí:\n    # 1. Obtener números del usuario\n    # 2. Obtener operador\n    # 3. Realizar operación\n    # 4. Mostrar resultado\n    # 5. Manejar todos los errores posibles\n    \n    pass\n\n# Ejecutar calculadora\n# calculadora_principal()\n",
          "solution": "def obtener_numero(mensaje):\n    \"\"\"Obtiene un número del usuario con validación\"\"\"\n    while True:\n        try:\n            entrada = input(mensaje)\n            numero = float(entrada)\n            return numero\n        except ValueError:\n            print(f'Error: \"{entrada}\" no es un número válido')\n            print('Por favor, introduce un número (ej: 5, 3.14, -2)')\n        except KeyboardInterrupt:\n            print('\\nOperación cancelada por el usuario')\n            return None\n\ndef obtener_operador():\n    \"\"\"Obtiene un operador válido del usuario\"\"\"\n    operadores_validos = ['+', '-', '*', '/']\n    while True:\n        operador = input('Introduce el operador (+, -, *, /): ').strip()\n        if operador in operadores_validos:\n            return operador\n        else:\n            print(f'Error: \"{operador}\" no es un operador válido')\n            print('Operadores válidos: +, -, *, /')\n\ndef realizar_operacion(num1, num2, operador):\n    \"\"\"Realiza operación matemática con manejo de errores\"\"\"\n    try:\n        if operador == '+':\n            return num1 + num2\n        elif operador == '-':\n            return num1 - num2\n        elif operador == '*':\n            return num1 * num2\n        elif operador == '/':\n            if num2 == 0:\n                raise ZeroDivisionError('No se puede dividir por cero')\n            return num1 / num2\n    except ZeroDivisionError as e:\n        print(f'Error de división: {e}')\n        return None\n    except Exception as e:\n        print(f'Error inesperado: {e}')\n        return None\n\ndef calculadora_principal():\n    \"\"\"Función principal de la calculadora\"\"\"\n    print('=== CALCULADORA ROBUSTA ===')\n    print('Operadores disponibles: +, -, *, /')\n    print('Presiona Ctrl+C para cancelar en cualquier momento\\n')\n    \n    try:\n        # Obtener primer número\n        num1 = obtener_numero('Introduce el primer número: ')\n        if num1 is None:\n            return\n        \n        # Obtener operador\n        operador = obtener_operador()\n        \n        # Obtener segundo número\n        num2 = obtener_numero('Introduce el segundo número: ')\n        if num2 is None:\n            return\n        \n        # Realizar operación\n        resultado = realizar_operacion(num1, num2, operador)\n        \n        if resultado is not None:\n            print(f'\\n=== RESULTADO ===')\n            print(f'{num1} {operador} {num2} = {resultado}')\n            \n            # Información adicional\n            if operador == '/':\n                print(f'Resultado redondeado: {round(resultado, 2)}')\n        else:\n            print('\\nNo se pudo completar la operación')\n            \n    except KeyboardInterrupt:\n        print('\\n\\nCalculadora cerrada por el usuario')\n    except Exception as e:\n        print(f'\\nError inesperado en la calculadora: {e}')\n    finally:\n        print('\\n¡Gracias por usar la calculadora!')\n\n# Simulación de la calculadora (en el ejercicio real usarías input())\nprint('=== DEMOSTRACIÓN ===')\nprint('Simulando: 10 / 2')\nresultado_demo = realizar_operacion(10, 2, '/')\nprint(f'Resultado: {resultado_demo}')\n\nprint('\\nSimulando: 10 / 0 (error)')\nresultado_error = realizar_operacion(10, 0, '/')\nprint(f'Resultado: {resultado_error}')\n\nprint('\\nSimulando operador inválido')\ntry:\n    resultado_invalido = realizar_operacion(5, 3, '%')\nexcept:\n    print('Operador no soportado')\n\n# Para ejecutar la calculadora interactiva, descomenta:\n# calculadora_principal()",
          "validation": "(code) => code.includes('try:') && code.includes('except') && code.includes('def ') && (code.includes('ValueError') || code.includes('ZeroDivisionError'))"
        }
      ]
    },
    "classes-basic": {
      "title": "Programación Orientada a Objetos",
      "sections": [
        {
          "type": "theory",
          "title": "¿Qué son las clases y objetos?",
          "content": "La Programación Orientada a Objetos (POO) es un paradigma que organiza el código en clases y objetos. Permite modelar entidades del mundo real de forma más intuitiva.\n\nConceptos clave:\n• Clase: plantilla o molde para crear objetos\n• Objeto: instancia específica de una clase\n• Atributos: características o propiedades\n• Métodos: funciones que pertenecen a la clase\n• Encapsulación: agrupar datos y métodos",
          "example": "# Definir una clase\nclass Persona:\n    # Constructor: se ejecuta al crear un objeto\n    def __init__(self, nombre, edad):\n        self.nombre = nombre    # atributo\n        self.edad = edad        # atributo\n        self.energia = 100      # atributo con valor por defecto\n    \n    # Método para mostrar información\n    def presentarse(self):\n        return f'Hola, soy {self.nombre} y tengo {self.edad} años'\n    \n    # Método para realizar una acción\n    def trabajar(self, horas):\n        self.energia -= horas * 10\n        return f'{self.nombre} trabajó {horas} horas. Energía: {self.energia}'\n\n# Crear objetos (instancias)\npersona1 = Persona('Ana', 25)\npersona2 = Persona('Carlos', 30)\n\n# Usar los objetos\nprint(persona1.presentarse())\nprint(persona2.presentarse())\nprint(persona1.trabajar(3))\nprint(f'Energía de {persona1.nombre}: {persona1.energia}')"
        },
        {
          "type": "theory",
          "title": "Herencia y polimorfismo",
          "content": "La herencia permite crear nuevas clases basadas en clases existentes, reutilizando y extendiendo funcionalidad. El polimorfismo permite que objetos de diferentes clases respondan al mismo método.\n\nBeneficios:\n• Reutilización de código\n• Organización jerárquica\n• Extensibilidad\n• Mantenimiento más fácil",
          "example": "# Clase base (padre)\nclass Animal:\n    def __init__(self, nombre, especie):\n        self.nombre = nombre\n        self.especie = especie\n        self.energia = 100\n    \n    def comer(self):\n        self.energia += 20\n        return f'{self.nombre} está comiendo. Energía: {self.energia}'\n    \n    def dormir(self):\n        self.energia = 100\n        return f'{self.nombre} durmió y recuperó toda su energía'\n    \n    def hacer_sonido(self):  # método que será sobrescrito\n        return f'{self.nombre} hace un sonido'\n\n# Clases derivadas (hijos)\nclass Perro(Animal):\n    def __init__(self, nombre, raza):\n        super().__init__(nombre, 'Perro')  # llamar constructor padre\n        self.raza = raza\n    \n    def hacer_sonido(self):  # sobrescribir método\n        return f'{self.nombre} ladra: ¡Guau guau!'\n    \n    def traer_pelota(self):\n        self.energia -= 15\n        return f'{self.nombre} trajo la pelota. Energía: {self.energia}'\n\nclass Gato(Animal):\n    def __init__(self, nombre, color):\n        super().__init__(nombre, 'Gato')\n        self.color = color\n    \n    def hacer_sonido(self):\n        return f'{self.nombre} maúlla: ¡Miau!'\n    \n    def trepar(self):\n        self.energia -= 10\n        return f'{self.nombre} trepó un árbol. Energía: {self.energia}'\n\n# Crear objetos\nmi_perro = Perro('Rex', 'Labrador')\nmi_gato = Gato('Whiskers', 'Negro')\n\n# Polimorfismo: mismo método, comportamiento diferente\nanimales = [mi_perro, mi_gato]\nfor animal in animales:\n    print(animal.hacer_sonido())  # cada uno hace su sonido específico"
        },
        {
          "type": "exercise",
          "title": "Sistema de biblioteca",
          "description": "Crea un sistema de biblioteca con clases para Libro, Usuario y Biblioteca. Implementa métodos para prestar y devolver libros.",
          "startingCode": "# Sistema de biblioteca con POO\n\nclass Libro:\n    def __init__(self, titulo, autor, isbn):\n        # Tu código aquí\n        pass\n    \n    def __str__(self):\n        # Representación en string del libro\n        pass\n\nclass Usuario:\n    def __init__(self, nombre, id_usuario):\n        # Tu código aquí\n        pass\n    \n    def prestar_libro(self, libro):\n        # Tu código aquí\n        pass\n    \n    def devolver_libro(self, libro):\n        # Tu código aquí\n        pass\n\nclass Biblioteca:\n    def __init__(self, nombre):\n        # Tu código aquí\n        pass\n    \n    def agregar_libro(self, libro):\n        # Tu código aquí\n        pass\n    \n    def registrar_usuario(self, usuario):\n        # Tu código aquí\n        pass\n    \n    def prestar_libro(self, isbn, id_usuario):\n        # Tu código aquí\n        pass\n    \n    def mostrar_disponibles(self):\n        # Tu código aquí\n        pass\n\n# Crear y probar el sistema\n# biblioteca = Biblioteca('Biblioteca Central')\n# libro1 = Libro('1984', 'George Orwell', '123456')\n# usuario1 = Usuario('Ana García', 'U001')\n",
          "solution": "from datetime import datetime, timedelta\n\nclass Libro:\n    def __init__(self, titulo, autor, isbn):\n        self.titulo = titulo\n        self.autor = autor\n        self.isbn = isbn\n        self.disponible = True\n        self.prestado_a = None\n        self.fecha_prestamo = None\n        self.fecha_devolucion = None\n    \n    def __str__(self):\n        estado = 'Disponible' if self.disponible else f'Prestado a {self.prestado_a}'\n        return f'\\'{self.titulo}\\' por {self.autor} (ISBN: {self.isbn}) - {estado}'\n    \n    def prestar(self, usuario, dias=14):\n        if self.disponible:\n            self.disponible = False\n            self.prestado_a = usuario.nombre\n            self.fecha_prestamo = datetime.now()\n            self.fecha_devolucion = self.fecha_prestamo + timedelta(days=dias)\n            return True\n        return False\n    \n    def devolver(self):\n        if not self.disponible:\n            self.disponible = True\n            self.prestado_a = None\n            self.fecha_prestamo = None\n            self.fecha_devolucion = None\n            return True\n        return False\n\nclass Usuario:\n    def __init__(self, nombre, id_usuario):\n        self.nombre = nombre\n        self.id_usuario = id_usuario\n        self.libros_prestados = []\n        self.historial = []\n    \n    def __str__(self):\n        return f'Usuario: {self.nombre} (ID: {self.id_usuario}) - Libros prestados: {len(self.libros_prestados)}'\n    \n    def prestar_libro(self, libro):\n        if libro.disponible and len(self.libros_prestados) < 3:  # máximo 3 libros\n            if libro.prestar(self):\n                self.libros_prestados.append(libro)\n                return True\n        return False\n    \n    def devolver_libro(self, libro):\n        if libro in self.libros_prestados:\n            if libro.devolver():\n                self.libros_prestados.remove(libro)\n                self.historial.append(libro.titulo)\n                return True\n        return False\n    \n    def mostrar_libros(self):\n        if self.libros_prestados:\n            print(f'\\nLibros prestados a {self.nombre}:')\n            for libro in self.libros_prestados:\n                dias_restantes = (libro.fecha_devolucion - datetime.now()).days\n                print(f'  - {libro.titulo} (Devolver en {dias_restantes} días)')\n        else:\n            print(f'{self.nombre} no tiene libros prestados')\n\nclass Biblioteca:\n    def __init__(self, nombre):\n        self.nombre = nombre\n        self.libros = {}\n        self.usuarios = {}\n        self.historial_prestamos = []\n    \n    def agregar_libro(self, libro):\n        self.libros[libro.isbn] = libro\n        print(f'Libro agregado: {libro.titulo}')\n    \n    def registrar_usuario(self, usuario):\n        self.usuarios[usuario.id_usuario] = usuario\n        print(f'Usuario registrado: {usuario.nombre}')\n    \n    def buscar_libro(self, termino):\n        \"\"\"Busca libros por título, autor o ISBN\"\"\"\n        resultados = []\n        for libro in self.libros.values():\n            if (termino.lower() in libro.titulo.lower() or \n                termino.lower() in libro.autor.lower() or \n                termino in libro.isbn):\n                resultados.append(libro)\n        return resultados\n    \n    def prestar_libro(self, isbn, id_usuario):\n        if isbn not in self.libros:\n            print(f'Libro con ISBN {isbn} no encontrado')\n            return False\n        \n        if id_usuario not in self.usuarios:\n            print(f'Usuario {id_usuario} no registrado')\n            return False\n        \n        libro = self.libros[isbn]\n        usuario = self.usuarios[id_usuario]\n        \n        if usuario.prestar_libro(libro):\n            self.historial_prestamos.append({\n                'libro': libro.titulo,\n                'usuario': usuario.nombre,\n                'fecha': datetime.now()\n            })\n            print(f'Libro \\'{libro.titulo}\\' prestado a {usuario.nombre}')\n            return True\n        else:\n            if not libro.disponible:\n                print(f'El libro \\'{libro.titulo}\\' no está disponible')\n            else:\n                print(f'{usuario.nombre} ya tiene el máximo de libros prestados')\n            return False\n    \n    def devolver_libro(self, isbn, id_usuario):\n        if isbn in self.libros and id_usuario in self.usuarios:\n            libro = self.libros[isbn]\n            usuario = self.usuarios[id_usuario]\n            \n            if usuario.devolver_libro(libro):\n                print(f'Libro \\'{libro.titulo}\\' devuelto por {usuario.nombre}')\n                return True\n        \n        print('No se pudo procesar la devolución')\n        return False\n    \n    def mostrar_disponibles(self):\n        print(f'\\n=== LIBROS DISPONIBLES EN {self.nombre.upper()} ===')\n        disponibles = [libro for libro in self.libros.values() if libro.disponible]\n        \n        if disponibles:\n            for libro in disponibles:\n                print(f'  📚 {libro}')\n        else:\n            print('  No hay libros disponibles')\n    \n    def mostrar_estadisticas(self):\n        total_libros = len(self.libros)\n        disponibles = len([l for l in self.libros.values() if l.disponible])\n        prestados = total_libros - disponibles\n        total_usuarios = len(self.usuarios)\n        \n        print(f'\\n=== ESTADÍSTICAS DE {self.nombre.upper()} ===')\n        print(f'Total de libros: {total_libros}')\n        print(f'Libros disponibles: {disponibles}')\n        print(f'Libros prestados: {prestados}')\n        print(f'Usuarios registrados: {total_usuarios}')\n        print(f'Total de préstamos: {len(self.historial_prestamos)}')\n\n# Demostración del sistema\nprint('=== SISTEMA DE BIBLIOTECA ===')\n\n# Crear biblioteca\nbiblioteca = Biblioteca('Biblioteca Central')\n\n# Crear libros\nlibro1 = Libro('1984', 'George Orwell', '978-0-452-28423-4')\nlibro2 = Libro('Cien años de soledad', 'Gabriel García Márquez', '978-0-06-088328-7')\nlibro3 = Libro('El principito', 'Antoine de Saint-Exupéry', '978-0-15-601219-4')\n\n# Agregar libros\nbiblioteca.agregar_libro(libro1)\nbiblioteca.agregar_libro(libro2)\nbiblioteca.agregar_libro(libro3)\n\n# Crear usuarios\nusuario1 = Usuario('Ana García', 'U001')\nusuario2 = Usuario('Carlos López', 'U002')\n\n# Registrar usuarios\nbiblioteca.registrar_usuario(usuario1)\nbiblioteca.registrar_usuario(usuario2)\n\n# Mostrar libros disponibles\nbiblioteca.mostrar_disponibles()\n\n# Realizar préstamos\nprint('\\n=== PRÉSTAMOS ===')\nbiblioteca.prestar_libro('978-0-452-28423-4', 'U001')\nbiblioteca.prestar_libro('978-0-06-088328-7', 'U001')\nbiblioteca.prestar_libro('978-0-452-28423-4', 'U002')  # libro ya prestado\n\n# Mostrar estado\nusuario1.mostrar_libros()\nbiblioteca.mostrar_disponibles()\nbiblioteca.mostrar_estadisticas()",
          "validation": "(code) => code.includes('class Libro') && code.includes('class Usuario') && code.includes('class Biblioteca') && code.includes('def __init__') && code.includes('self.')"
        }
      ]
    },
    "modules-basic": {
      "title": "Módulos y Paquetes",
      "sections": [
        {
          "type": "theory",
          "title": "¿Qué son los módulos?",
          "content": "Los módulos son archivos Python que contienen código reutilizable (funciones, clases, variables). Permiten organizar el código en archivos separados y reutilizar funcionalidad.\n\nVentajas de los módulos:\n• Organización del código\n• Reutilización\n• Mantenimiento más fácil\n• Evitar conflictos de nombres\n• Colaboración en equipo",
          "example": "# Ejemplo de módulo personalizado\n# Supongamos que tenemos un archivo 'matematicas.py'\n\n# === matematicas.py ===\ndef sumar(a, b):\n    \"\"\"Suma dos números\"\"\"\n    return a + b\n\ndef multiplicar(a, b):\n    \"\"\"Multiplica dos números\"\"\"\n    return a * b\n\ndef calcular_area_circulo(radio):\n    \"\"\"Calcula el área de un círculo\"\"\"\n    PI = 3.14159\n    return PI * radio ** 2\n\nclass Calculadora:\n    def __init__(self):\n        self.historial = []\n    \n    def operar(self, a, b, operacion):\n        if operacion == 'suma':\n            resultado = sumar(a, b)\n        elif operacion == 'multiplicacion':\n            resultado = multiplicar(a, b)\n        else:\n            resultado = None\n        \n        self.historial.append(f'{a} {operacion} {b} = {resultado}')\n        return resultado\n\n# === archivo_principal.py ===\n# Diferentes formas de importar\n\n# 1. Importar todo el módulo\nimport matematicas\nresultado1 = matematicas.sumar(5, 3)\nprint(f'Suma: {resultado1}')\n\n# 2. Importar funciones específicas\nfrom matematicas import multiplicar, calcular_area_circulo\nresultado2 = multiplicar(4, 6)\narea = calcular_area_circulo(5)\nprint(f'Multiplicación: {resultado2}')\nprint(f'Área del círculo: {area}')\n\n# 3. Importar con alias\nfrom matematicas import Calculadora as Calc\ncalc = Calc()\nresultado3 = calc.operar(10, 2, 'suma')\nprint(f'Con calculadora: {resultado3}')"
        },
        {
          "type": "theory",
          "title": "Módulos estándar de Python",
          "content": "Python viene con una gran biblioteca estándar de módulos útiles. Estos módulos proporcionan funcionalidad adicional sin necesidad de instalar paquetes externos.\n\nMódulos comunes:\n• math: funciones matemáticas\n• random: números aleatorios\n• datetime: manejo de fechas\n• json: trabajo con JSON\n• os: interacción con el sistema operativo\n• sys: información del sistema",
          "example": "# Ejemplos de módulos estándar\n\n# 1. Módulo math\nimport math\nprint(f'Raíz cuadrada de 16: {math.sqrt(16)}')\nprint(f'Seno de 90 grados: {math.sin(math.radians(90))}')\nprint(f'Pi: {math.pi}')\nprint(f'Logaritmo natural de 10: {math.log(10)}')\n\n# 2. Módulo random\nimport random\nprint(f'\\nNúmero aleatorio entre 1 y 10: {random.randint(1, 10)}')\nprint(f'Número decimal aleatorio: {random.random()}')\ncolores = ['rojo', 'azul', 'verde', 'amarillo']\nprint(f'Color aleatorio: {random.choice(colores)}')\n\n# 3. Módulo datetime\nfrom datetime import datetime, timedelta\nahora = datetime.now()\nprint(f'\\nFecha y hora actual: {ahora}')\nprint(f'Solo fecha: {ahora.date()}')\nprint(f'Solo hora: {ahora.time()}')\nmanana = ahora + timedelta(days=1)\nprint(f'Mañana será: {manana.date()}')\n\n# 4. Módulo json\nimport json\ndatos = {'nombre': 'Ana', 'edad': 25, 'activo': True}\njson_string = json.dumps(datos, indent=2)\nprint(f'\\nDatos en JSON:\\n{json_string}')\ndatos_recuperados = json.loads(json_string)\nprint(f'Datos recuperados: {datos_recuperados}')\n\n# 5. Módulo os\nimport os\nprint(f'\\nDirectorio actual: {os.getcwd()}')\nprint(f'Sistema operativo: {os.name}')\nprint(f'Variables de entorno PATH: {os.environ.get(\"PATH\", \"No encontrado\")[:100]}...')"
        },
        {
          "type": "exercise",
          "title": "Utilidades personalizadas",
          "description": "Crea un módulo de utilidades con funciones para validaciones, conversiones y operaciones comunes.",
          "startingCode": "# Crea tu módulo de utilidades personalizadas\n\n# === utilidades.py (simularemos el contenido) ===\n\ndef validar_email(email):\n    \"\"\"Valida si un email tiene formato correcto\"\"\"\n    # Tu código aquí\n    pass\n\ndef convertir_temperatura(valor, desde, hacia):\n    \"\"\"Convierte temperatura entre Celsius, Fahrenheit y Kelvin\"\"\"\n    # Tu código aquí\n    pass\n\ndef generar_password(longitud=8, incluir_simbolos=True):\n    \"\"\"Genera una contraseña aleatoria\"\"\"\n    # Tu código aquí\n    pass\n\ndef calcular_imc(peso, altura):\n    \"\"\"Calcula el Índice de Masa Corporal\"\"\"\n    # Tu código aquí\n    pass\n\nclass ValidadorDatos:\n    \"\"\"Clase para validar diferentes tipos de datos\"\"\"\n    \n    @staticmethod\n    def es_numero_telefono(telefono):\n        \"\"\"Valida formato de número telefónico\"\"\"\n        # Tu código aquí\n        pass\n    \n    @staticmethod\n    def es_codigo_postal(codigo):\n        \"\"\"Valida código postal (formato español)\"\"\"\n        # Tu código aquí\n        pass\n\n# === programa_principal.py ===\n# Usar las utilidades\n\n# Importar y probar las funciones\n# emails_prueba = ['test@example.com', 'invalid-email', 'user@domain.es']\n# for email in emails_prueba:\n#     print(f'{email}: {validar_email(email)}')\n\n",
          "solution": "import re\nimport random\nimport string\nimport math\nfrom datetime import datetime\n\n# === utilidades.py ===\n\ndef validar_email(email):\n    \"\"\"Valida si un email tiene formato correcto\"\"\"\n    patron = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return re.match(patron, email) is not None\n\ndef convertir_temperatura(valor, desde, hacia):\n    \"\"\"Convierte temperatura entre Celsius, Fahrenheit y Kelvin\"\"\"\n    # Normalizar a minúsculas\n    desde = desde.lower()\n    hacia = hacia.lower()\n    \n    # Convertir todo a Celsius primero\n    if desde == 'fahrenheit' or desde == 'f':\n        celsius = (valor - 32) * 5/9\n    elif desde == 'kelvin' or desde == 'k':\n        celsius = valor - 273.15\n    elif desde == 'celsius' or desde == 'c':\n        celsius = valor\n    else:\n        return None\n    \n    # Convertir de Celsius a la unidad destino\n    if hacia == 'fahrenheit' or hacia == 'f':\n        return celsius * 9/5 + 32\n    elif hacia == 'kelvin' or hacia == 'k':\n        return celsius + 273.15\n    elif hacia == 'celsius' or hacia == 'c':\n        return celsius\n    else:\n        return None\n\ndef generar_password(longitud=8, incluir_simbolos=True):\n    \"\"\"Genera una contraseña aleatoria\"\"\"\n    caracteres = string.ascii_letters + string.digits\n    if incluir_simbolos:\n        caracteres += '!@#$%^&*()_+-=[]{}|;:,.<>?'\n    \n    password = ''.join(random.choice(caracteres) for _ in range(longitud))\n    return password\n\ndef calcular_imc(peso, altura):\n    \"\"\"Calcula el Índice de Masa Corporal\"\"\"\n    if altura <= 0 or peso <= 0:\n        return None\n    \n    imc = peso / (altura ** 2)\n    \n    # Clasificación\n    if imc < 18.5:\n        categoria = 'Bajo peso'\n    elif imc < 25:\n        categoria = 'Peso normal'\n    elif imc < 30:\n        categoria = 'Sobrepeso'\n    else:\n        categoria = 'Obesidad'\n    \n    return {\n        'imc': round(imc, 2),\n        'categoria': categoria\n    }\n\ndef formatear_numero(numero, decimales=2, separador_miles=','):\n    \"\"\"Formatea un número con separadores de miles y decimales\"\"\"\n    return f'{numero:,.{decimales}f}'.replace(',', separador_miles)\n\ndef calcular_edad(fecha_nacimiento):\n    \"\"\"Calcula la edad a partir de fecha de nacimiento\"\"\"\n    try:\n        if isinstance(fecha_nacimiento, str):\n            # Intentar parsear diferentes formatos\n            formatos = ['%Y-%m-%d', '%d/%m/%Y', '%d-%m-%Y']\n            for formato in formatos:\n                try:\n                    fecha_nacimiento = datetime.strptime(fecha_nacimiento, formato)\n                    break\n                except ValueError:\n                    continue\n            else:\n                return None\n        \n        hoy = datetime.now()\n        edad = hoy.year - fecha_nacimiento.year\n        \n        # Ajustar si no ha pasado el cumpleaños este año\n        if (hoy.month, hoy.day) < (fecha_nacimiento.month, fecha_nacimiento.day):\n            edad -= 1\n        \n        return edad\n    except:\n        return None\n\nclass ValidadorDatos:\n    \"\"\"Clase para validar diferentes tipos de datos\"\"\"\n    \n    @staticmethod\n    def es_numero_telefono(telefono):\n        \"\"\"Valida formato de número telefónico español\"\"\"\n        # Limpiar espacios y guiones\n        telefono_limpio = re.sub(r'[\\s-]', '', telefono)\n        \n        # Patrones para España\n        patrones = [\n            r'^\\+34[6-9]\\d{8}$',  # +34 seguido de móvil\n            r'^[6-9]\\d{8}$',      # Móvil sin prefijo\n            r'^\\+349\\d{8}$',      # +34 seguido de fijo\n            r'^9\\d{8}$'           # Fijo sin prefijo\n        ]\n        \n        return any(re.match(patron, telefono_limpio) for patron in patrones)\n    \n    @staticmethod\n    def es_codigo_postal(codigo):\n        \"\"\"Valida código postal español (5 dígitos)\"\"\"\n        patron = r'^\\d{5}$'\n        return re.match(patron, str(codigo)) is not None\n    \n    @staticmethod\n    def es_dni_valido(dni):\n        \"\"\"Valida DNI español con letra\"\"\"\n        dni = dni.upper().replace(' ', '')\n        \n        if len(dni) != 9:\n            return False\n        \n        numeros = dni[:8]\n        letra = dni[8]\n        \n        if not numeros.isdigit():\n            return False\n        \n        letras = 'TRWAGMYFPDXBNJZSQVHLCKE'\n        letra_calculada = letras[int(numeros) % 23]\n        \n        return letra == letra_calculada\n    \n    @staticmethod\n    def es_url_valida(url):\n        \"\"\"Valida formato básico de URL\"\"\"\n        patron = r'^https?://[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}(/.*)?$'\n        return re.match(patron, url) is not None\n\nclass ConversorUnidades:\n    \"\"\"Clase para convertir entre diferentes unidades\"\"\"\n    \n    @staticmethod\n    def metros_a_pies(metros):\n        return metros * 3.28084\n    \n    @staticmethod\n    def pies_a_metros(pies):\n        return pies / 3.28084\n    \n    @staticmethod\n    def kg_a_libras(kg):\n        return kg * 2.20462\n    \n    @staticmethod\n    def libras_a_kg(libras):\n        return libras / 2.20462\n    \n    @staticmethod\n    def kmh_a_ms(kmh):\n        return kmh / 3.6\n    \n    @staticmethod\n    def ms_a_kmh(ms):\n        return ms * 3.6\n\n# === programa_principal.py ===\n# Demostración de las utilidades\n\nprint('=== MÓDULO DE UTILIDADES ===')\n\n# Prueba de validación de emails\nprint('\\n1. VALIDACIÓN DE EMAILS:')\nemails_prueba = ['test@example.com', 'invalid-email', 'user@domain.es', 'nombre.apellido@empresa.com.es']\nfor email in emails_prueba:\n    valido = validar_email(email)\n    print(f'  {email:<30} -> {\"✓ Válido\" if valido else \"✗ Inválido\"}')\n\n# Prueba de conversión de temperatura\nprint('\\n2. CONVERSIÓN DE TEMPERATURA:')\ntemperaturas = [(0, 'celsius', 'fahrenheit'), (100, 'celsius', 'fahrenheit'), (32, 'fahrenheit', 'celsius')]\nfor temp, desde, hacia in temperaturas:\n    resultado = convertir_temperatura(temp, desde, hacia)\n    print(f'  {temp}° {desde.title()} = {resultado:.1f}° {hacia.title()}')\n\n# Prueba de generación de contraseñas\nprint('\\n3. GENERACIÓN DE CONTRASEÑAS:')\nfor longitud in [8, 12, 16]:\n    password = generar_password(longitud, True)\n    print(f'  Contraseña de {longitud} caracteres: {password}')\n\n# Prueba de cálculo de IMC\nprint('\\n4. CÁLCULO DE IMC:')\npersonas = [(70, 1.75), (80, 1.80), (60, 1.65)]\nfor peso, altura in personas:\n    resultado = calcular_imc(peso, altura)\n    print(f'  Peso: {peso}kg, Altura: {altura}m -> IMC: {resultado[\"imc\"]} ({resultado[\"categoria\"]})')\n\n# Prueba de validaciones\nprint('\\n5. VALIDACIONES:')\nvalidador = ValidadorDatos()\n\n# Teléfonos\ntelefonos = ['+34666123456', '666123456', '912345678', '123456']\nprint('  Teléfonos:')\nfor tel in telefonos:\n    valido = validador.es_numero_telefono(tel)\n    print(f'    {tel:<15} -> {\"✓ Válido\" if valido else \"✗ Inválido\"}')\n\n# Códigos postales\ncodigos = ['28001', '08001', '41001', '1234', '123456']\nprint('  Códigos postales:')\nfor codigo in codigos:\n    valido = validador.es_codigo_postal(codigo)\n    print(f'    {codigo:<10} -> {\"✓ Válido\" if valido else \"✗ Inválido\"}')\n\n# DNIs\ndnis = ['12345678Z', '12345678A', '87654321X']\nprint('  DNIs:')\nfor dni in dnis:\n    valido = validador.es_dni_valido(dni)\n    print(f'    {dni:<12} -> {\"✓ Válido\" if valido else \"✗ Inválido\"}')\n\nprint('\\n6. CONVERSIONES DE UNIDADES:')\nconversor = ConversorUnidades()\nprint(f'  10 metros = {conversor.metros_a_pies(10):.2f} pies')\nprint(f'  70 kg = {conversor.kg_a_libras(70):.2f} libras')\nprint(f'  100 km/h = {conversor.kmh_a_ms(100):.2f} m/s')\n\nprint('\\n=== FIN DE DEMOSTRACIÓN ===')",
          "validation": "(code) => code.includes('def validar_email') && code.includes('def convertir_temperatura') && code.includes('class ValidadorDatos') && code.includes('import')"
        }
      ]
    },
    "list-comprehensions": {
      "title": "Comprensión de Listas y Generadores",
      "sections": [
        {
          "type": "theory",
          "title": "¿Qué son las comprensiones de listas?",
          "content": "Las comprensiones de listas (list comprehensions) son una forma concisa y elegante de crear listas en Python. Permiten filtrar y transformar datos en una sola línea de código.\n\nVentajas:\n• Código más legible y conciso\n• Mejor rendimiento que bucles tradicionales\n• Estilo pythónico\n• Menos líneas de código\n• Expresividad clara de la intención",
          "example": "# Método tradicional vs comprensión de listas\n\n# Método tradicional: crear lista de cuadrados\nnumeros = [1, 2, 3, 4, 5]\ncuadrados_tradicional = []\nfor num in numeros:\n    cuadrados_tradicional.append(num ** 2)\nprint(f'Tradicional: {cuadrados_tradicional}')\n\n# Con comprensión de listas\ncuadrados_compresion = [num ** 2 for num in numeros]\nprint(f'Comprensión: {cuadrados_compresion}')\n\n# Filtrar números pares\npares_tradicional = []\nfor num in range(1, 11):\n    if num % 2 == 0:\n        pares_tradicional.append(num)\nprint(f'Pares tradicional: {pares_tradicional}')\n\n# Con comprensión y filtro\npares_compresion = [num for num in range(1, 11) if num % 2 == 0]\nprint(f'Pares comprensión: {pares_compresion}')\n\n# Transformar y filtrar strings\npalabras = ['python', 'java', 'javascript', 'go', 'rust']\n# Solo palabras largas en mayúsculas\npalabras_largas = [palabra.upper() for palabra in palabras if len(palabra) > 4]\nprint(f'Palabras largas: {palabras_largas}')"
        },
        {
          "type": "theory",
          "title": "Comprensiones avanzadas y generadores",
          "content": "Python ofrece comprensiones para diferentes estructuras de datos y generadores para manejo eficiente de memoria.\n\nTipos de comprensiones:\n• Lista: [expresión for item in iterable]\n• Diccionario: {clave: valor for item in iterable}\n• Conjunto: {expresión for item in iterable}\n• Generador: (expresión for item in iterable)",
          "example": "# Comprensión de diccionarios\nnumeros = [1, 2, 3, 4, 5]\ndiccionario_cuadrados = {num: num**2 for num in numeros}\nprint(f'Diccionario: {diccionario_cuadrados}')\n\n# Comprensión de conjuntos (sets)\nletras_unicas = {letra.lower() for letra in 'Programming Python'}\nprint(f'Letras únicas: {letras_unicas}')\n\n# Comprensión anidada: matriz\nmatriz = [[i*j for j in range(1, 4)] for i in range(1, 4)]\nprint('Matriz:')\nfor fila in matriz:\n    print(f'  {fila}')\n\n# Generadores (más eficientes en memoria)\nnumeros_grandes = (x**2 for x in range(1000000) if x % 1000 == 0)\nprint('Primeros 5 cuadrados de múltiplos de 1000:')\nfor i, cuadrado in enumerate(numeros_grandes):\n    if i >= 5:\n        break\n    print(f'  {cuadrado}')\n\n# Comprensión con múltiples condiciones\nmatricula_honor = []\nestudiantes = [\n    {'nombre': 'Ana', 'nota': 9.5, 'asistencia': 95},\n    {'nombre': 'Carlos', 'nota': 8.8, 'asistencia': 90},\n    {'nombre': 'María', 'nota': 9.2, 'asistencia': 88},\n    {'nombre': 'Luis', 'nota': 9.8, 'asistencia': 98}\n]\n\n# Estudiantes con matrícula de honor\nmatricula_honor = [\n    estudiante['nombre'] \n    for estudiante in estudiantes \n    if estudiante['nota'] >= 9.0 and estudiante['asistencia'] >= 90\n]\nprint(f'Matrícula de honor: {matricula_honor}')"
        },
        {
          "type": "exercise",
          "title": "Análisis de datos con comprensiones",
          "description": "Usa comprensiones de listas para analizar datos de ventas y generar reportes.",
          "startingCode": "# Datos de ventas de una tienda\nventas = [\n    {'producto': 'Laptop', 'precio': 800, 'cantidad': 5, 'categoria': 'tecnologia'},\n    {'producto': 'Mouse', 'precio': 25, 'cantidad': 20, 'categoria': 'tecnologia'},\n    {'producto': 'Libro Python', 'precio': 30, 'cantidad': 15, 'categoria': 'educacion'},\n    {'producto': 'Smartphone', 'precio': 600, 'cantidad': 8, 'categoria': 'tecnologia'},\n    {'producto': 'Curso Online', 'precio': 50, 'cantidad': 25, 'categoria': 'educacion'},\n    {'producto': 'Tablet', 'precio': 300, 'cantidad': 12, 'categoria': 'tecnologia'},\n    {'producto': 'Libro JavaScript', 'precio': 25, 'cantidad': 18, 'categoria': 'educacion'}\n]\n\n# Tu código aquí:\n# 1. Lista de productos de tecnología con precio > 100\nproductos_tech_caros = []\n\n# 2. Diccionario con total de ventas por producto\ntotales_por_producto = {}\n\n# 3. Lista de productos con stock bajo (cantidad < 10)\nstock_bajo = []\n\n# 4. Conjunto de categorías únicas\ncategorias_unicas = set()\n\n# 5. Lista de productos ordenados por total de ventas\n# productos_ordenados = []\n\nprint('=== ANÁLISIS DE VENTAS ===')\n",
          "solution": "# Datos de ventas de una tienda\nventas = [\n    {'producto': 'Laptop', 'precio': 800, 'cantidad': 5, 'categoria': 'tecnologia'},\n    {'producto': 'Mouse', 'precio': 25, 'cantidad': 20, 'categoria': 'tecnologia'},\n    {'producto': 'Libro Python', 'precio': 30, 'cantidad': 15, 'categoria': 'educacion'},\n    {'producto': 'Smartphone', 'precio': 600, 'cantidad': 8, 'categoria': 'tecnologia'},\n    {'producto': 'Curso Online', 'precio': 50, 'cantidad': 25, 'categoria': 'educacion'},\n    {'producto': 'Tablet', 'precio': 300, 'cantidad': 12, 'categoria': 'tecnologia'},\n    {'producto': 'Libro JavaScript', 'precio': 25, 'cantidad': 18, 'categoria': 'educacion'}\n]\n\nprint('=== ANÁLISIS DE VENTAS CON COMPRENSIONES ===')\n\n# 1. Lista de productos de tecnología con precio > 100\nproductos_tech_caros = [\n    venta['producto'] \n    for venta in ventas \n    if venta['categoria'] == 'tecnologia' and venta['precio'] > 100\n]\nprint(f'\\n1. Productos de tecnología caros (>$100):')\nfor producto in productos_tech_caros:\n    print(f'   - {producto}')\n\n# 2. Diccionario con total de ventas por producto\ntotales_por_producto = {\n    venta['producto']: venta['precio'] * venta['cantidad'] \n    for venta in ventas\n}\nprint(f'\\n2. Total de ventas por producto:')\nfor producto, total in totales_por_producto.items():\n    print(f'   {producto:<20} ${total:,}')\n\n# 3. Lista de productos con stock bajo (cantidad < 10)\nstock_bajo = [\n    f\"{venta['producto']} (Stock: {venta['cantidad']})\" \n    for venta in ventas \n    if venta['cantidad'] < 10\n]\nprint(f'\\n3. Productos con stock bajo (<10 unidades):')\nfor item in stock_bajo:\n    print(f'   ⚠️  {item}')\n\n# 4. Conjunto de categorías únicas\ncategorias_unicas = {venta['categoria'] for venta in ventas}\nprint(f'\\n4. Categorías disponibles: {list(categorias_unicas)}')\n\n# 5. Lista de productos ordenados por total de ventas (descendente)\nproductos_ordenados = [\n    {\n        'producto': venta['producto'],\n        'total_ventas': venta['precio'] * venta['cantidad'],\n        'categoria': venta['categoria']\n    }\n    for venta in ventas\n]\n# Ordenar por total de ventas\nproductos_ordenados.sort(key=lambda x: x['total_ventas'], reverse=True)\n\nprint(f'\\n5. Ranking de productos por ventas:')\nfor i, item in enumerate(productos_ordenados, 1):\n    print(f'   {i}. {item[\"producto\"]:<20} ${item[\"total_ventas\"]:,} ({item[\"categoria\"]})')\n\n# 6. Análisis por categoría usando comprensiones\nanalisis_categorias = {\n    categoria: {\n        'productos': len([v for v in ventas if v['categoria'] == categoria]),\n        'ventas_totales': sum(v['precio'] * v['cantidad'] for v in ventas if v['categoria'] == categoria),\n        'promedio_precio': sum(v['precio'] for v in ventas if v['categoria'] == categoria) / len([v for v in ventas if v['categoria'] == categoria])\n    }\n    for categoria in categorias_unicas\n}\n\nprint(f'\\n6. Análisis por categoría:')\nfor categoria, datos in analisis_categorias.items():\n    print(f'   {categoria.title()}:')\n    print(f'     • Productos: {datos[\"productos\"]}')\n    print(f'     • Ventas totales: ${datos[\"ventas_totales\"]:,}')\n    print(f'     • Precio promedio: ${datos[\"promedio_precio\"]:.2f}')\n\n# 7. Generador para productos premium (precio > promedio)\npromedio_precio = sum(venta['precio'] for venta in ventas) / len(ventas)\nproductos_premium = (\n    f\"{venta['producto']} (${venta['precio']})\" \n    for venta in ventas \n    if venta['precio'] > promedio_precio\n)\n\nprint(f'\\n7. Productos premium (precio > ${promedio_precio:.2f}):')\nfor producto in productos_premium:\n    print(f'   💎 {producto}')\n\n# 8. Resumen ejecutivo\ntotal_productos = len(ventas)\ntotal_ingresos = sum(venta['precio'] * venta['cantidad'] for venta in ventas)\nproducto_top = max(ventas, key=lambda x: x['precio'] * x['cantidad'])\ncategoria_top = max(categorias_unicas, key=lambda cat: sum(v['precio'] * v['cantidad'] for v in ventas if v['categoria'] == cat))\n\nprint(f'\\n=== RESUMEN EJECUTIVO ===')\nprint(f'• Total de productos: {total_productos}')\nprint(f'• Ingresos totales: ${total_ingresos:,}')\nprint(f'• Producto más vendido: {producto_top[\"producto\"]} (${producto_top[\"precio\"] * producto_top[\"cantidad\"]:,})')\nprint(f'• Categoría líder: {categoria_top.title()}')\nprint(f'• Ticket promedio: ${total_ingresos / sum(v[\"cantidad\"] for v in ventas):.2f}')",
          "validation": "(code) => code.includes('[') && code.includes('for') && code.includes('in') && code.includes('if')"
        }
      ]
    },
    "libraries-intro": {
      "title": "Librerías Populares de Python",
      "sections": [
        {
          "type": "theory",
          "title": "Introducción a las librerías",
          "content": "Python tiene un ecosistema rico de librerías que extienden sus capacidades. Estas librerías nos permiten realizar tareas complejas con código simple y eficiente.\n\nCategorías principales:\n• Análisis de datos: pandas, numpy\n• Visualización: matplotlib, seaborn, plotly\n• Machine Learning: scikit-learn, tensorflow\n• Web: requests, flask, django\n• Automatización: selenium, beautifulsoup\n• Fechas: dateutil, arrow",
          "example": "# Ejemplo conceptual de librerías populares\n# (En un entorno real necesitarías instalar: pip install pandas numpy matplotlib requests)\n\n# 1. Requests - para hacer peticiones HTTP\n# import requests\n# response = requests.get('https://api.github.com/users/octocat')\n# data = response.json()\n# print(f\"Usuario: {data['name']}, Repos: {data['public_repos']}\")\n\n# 2. Pandas - para análisis de datos\n# import pandas as pd\n# df = pd.DataFrame({\n#     'nombre': ['Ana', 'Carlos', 'María'],\n#     'edad': [25, 30, 28],\n#     'salario': [50000, 60000, 55000]\n# })\n# print(df.describe())  # estadísticas descriptivas\n\n# 3. NumPy - para cálculos numéricos\n# import numpy as np\n# array = np.array([1, 2, 3, 4, 5])\n# print(f\"Media: {np.mean(array)}\")\n# print(f\"Desviación estándar: {np.std(array)}\")\n\n# 4. Matplotlib - para gráficos\n# import matplotlib.pyplot as plt\n# x = [1, 2, 3, 4, 5]\n# y = [2, 4, 6, 8, 10]\n# plt.plot(x, y)\n# plt.title('Línea recta')\n# plt.show()\n\nprint('=== SIMULACIÓN DE LIBRERÍAS ===')\nprint('En un entorno real, estas librerías proporcionan:')\nprint('• Requests: Comunicación con APIs web')\nprint('• Pandas: Manipulación eficiente de datos tabulares')\nprint('• NumPy: Cálculos matemáticos optimizados')\nprint('• Matplotlib: Visualizaciones profesionales')\nprint('• Scikit-learn: Algoritmos de machine learning')\nprint('• BeautifulSoup: Web scraping y parsing HTML')"
        },
        {
          "type": "theory",
          "title": "Trabajando con datos estructurados",
          "content": "Una de las fortalezas de Python es el manejo de datos. Aprenderemos conceptos fundamentales que aplican tanto con estructuras nativas como con librerías especializadas.\n\nConceptos clave:\n• DataFrames y Series (concepto similar a pandas)\n• Filtrado y transformación de datos\n• Agregaciones y agrupaciones\n• Manejo de datos faltantes\n• Exportación e importación",
          "example": "# Simulación de análisis de datos estilo pandas usando estructuras nativas\n\n# Datos de ejemplo: ventas mensuales\nventas_data = [\n    {'mes': 'Enero', 'producto': 'Laptop', 'ventas': 15, 'precio': 800, 'region': 'Norte'},\n    {'mes': 'Enero', 'producto': 'Mouse', 'ventas': 50, 'precio': 25, 'region': 'Norte'},\n    {'mes': 'Enero', 'producto': 'Laptop', 'ventas': 12, 'precio': 800, 'region': 'Sur'},\n    {'mes': 'Febrero', 'producto': 'Laptop', 'ventas': 18, 'precio': 800, 'region': 'Norte'},\n    {'mes': 'Febrero', 'producto': 'Mouse', 'ventas': 45, 'precio': 25, 'region': 'Norte'},\n    {'mes': 'Febrero', 'producto': 'Tablet', 'ventas': 8, 'precio': 300, 'region': 'Sur'},\n]\n\n# Simulación de operaciones tipo DataFrame\nclass SimpleDataFrame:\n    def __init__(self, data):\n        self.data = data\n    \n    def filter(self, condition_func):\n        \"\"\"Filtrar filas basado en una condición\"\"\"\n        return SimpleDataFrame([row for row in self.data if condition_func(row)])\n    \n    def group_by(self, column):\n        \"\"\"Agrupar por una columna\"\"\"\n        groups = {}\n        for row in self.data:\n            key = row[column]\n            if key not in groups:\n                groups[key] = []\n            groups[key].append(row)\n        return groups\n    \n    def aggregate(self, column, func):\n        \"\"\"Aplicar función de agregación\"\"\"\n        values = [row[column] for row in self.data]\n        return func(values)\n    \n    def add_column(self, name, values):\n        \"\"\"Agregar una nueva columna\"\"\"\n        for i, row in enumerate(self.data):\n            row[name] = values[i] if i < len(values) else None\n    \n    def show(self, limit=None):\n        \"\"\"Mostrar los datos\"\"\"\n        data_to_show = self.data[:limit] if limit else self.data\n        if not data_to_show:\n            print('No hay datos')\n            return\n        \n        # Obtener todas las columnas\n        columns = list(data_to_show[0].keys())\n        \n        # Imprimir encabezados\n        header = ' | '.join(f'{col:>10}' for col in columns)\n        print(header)\n        print('-' * len(header))\n        \n        # Imprimir filas\n        for row in data_to_show:\n            row_str = ' | '.join(f'{str(row.get(col, \"N/A\")):>10}' for col in columns)\n            print(row_str)\n\n# Crear DataFrame simulado\ndf = SimpleDataFrame(ventas_data)\n\nprint('=== ANÁLISIS DE DATOS ESTILO PANDAS ===')\nprint('\\n1. Datos originales:')\ndf.show()\n\n# Calcular ingresos totales\nfor row in df.data:\n    row['ingresos'] = row['ventas'] * row['precio']\n\nprint('\\n2. Con columna de ingresos calculada:')\ndf.show()\n\n# Filtrar solo laptops\nlaptops_df = df.filter(lambda row: row['producto'] == 'Laptop')\nprint('\\n3. Solo ventas de laptops:')\nlaptops_df.show()\n\n# Agrupar por mes\nventas_por_mes = df.group_by('mes')\nprint('\\n4. Ventas totales por mes:')\nfor mes, ventas in ventas_por_mes.items():\n    total_ingresos = sum(venta['ingresos'] for venta in ventas)\n    total_unidades = sum(venta['ventas'] for venta in ventas)\n    print(f'   {mes}: ${total_ingresos:,} ({total_unidades} unidades)')\n\n# Estadísticas descriptivas\nprint('\\n5. Estadísticas descriptivas:')\ningresos_totales = df.aggregate('ingresos', sum)\ningresos_promedio = df.aggregate('ingresos', lambda x: sum(x) / len(x))\ningresos_max = df.aggregate('ingresos', max)\ningresos_min = df.aggregate('ingresos', min)\n\nprint(f'   Total de ingresos: ${ingresos_totales:,}')\nprint(f'   Ingreso promedio: ${ingresos_promedio:.2f}')\nprint(f'   Ingreso máximo: ${ingresos_max:,}')\nprint(f'   Ingreso mínimo: ${ingresos_min:,}')"
        },
        {
          "type": "exercise",
          "title": "Sistema de análisis de rendimiento",
          "description": "Crea un sistema que analice datos de rendimiento de empleados usando conceptos de análisis de datos.",
          "startingCode": "# Sistema de análisis de rendimiento de empleados\n\n# Datos de empleados\nempleados_data = [\n    {'id': 1, 'nombre': 'Ana García', 'departamento': 'Ventas', 'salario': 45000, 'ventas_mes': 120000, 'años_empresa': 3},\n    {'id': 2, 'nombre': 'Carlos López', 'departamento': 'Marketing', 'salario': 50000, 'ventas_mes': 0, 'años_empresa': 2},\n    {'id': 3, 'nombre': 'María Rodríguez', 'departamento': 'Ventas', 'salario': 48000, 'ventas_mes': 150000, 'años_empresa': 5},\n    {'id': 4, 'nombre': 'Luis Martín', 'departamento': 'IT', 'salario': 55000, 'ventas_mes': 0, 'años_empresa': 4},\n    {'id': 5, 'nombre': 'Elena Sánchez', 'departamento': 'Ventas', 'salario': 42000, 'ventas_mes': 95000, 'años_empresa': 1},\n    {'id': 6, 'nombre': 'Roberto Díaz', 'departamento': 'Marketing', 'salario': 52000, 'ventas_mes': 0, 'años_empresa': 6},\n    {'id': 7, 'nombre': 'Carmen Ruiz', 'departamento': 'IT', 'salario': 58000, 'ventas_mes': 0, 'años_empresa': 7},\n    {'id': 8, 'nombre': 'José Morales', 'departamento': 'Ventas', 'salario': 46000, 'ventas_mes': 110000, 'años_empresa': 2}\n]\n\n# Tu código aquí:\n# Implementa las siguientes funciones de análisis\n\ndef calcular_kpis_empleado(empleado):\n    \"\"\"Calcula KPIs para un empleado individual\"\"\"\n    # Tu código aquí\n    pass\n\ndef analizar_departamento(empleados, departamento):\n    \"\"\"Analiza métricas de un departamento específico\"\"\"\n    # Tu código aquí\n    pass\n\ndef ranking_empleados(empleados, criterio='rendimiento'):\n    \"\"\"Crea ranking de empleados por criterio\"\"\"\n    # Tu código aquí\n    pass\n\ndef generar_reporte_ejecutivo(empleados):\n    \"\"\"Genera reporte ejecutivo completo\"\"\"\n    # Tu código aquí\n    pass\n\n# Ejecutar análisis\n# generar_reporte_ejecutivo(empleados_data)\n",
          "solution": "import statistics\nfrom collections import defaultdict\n\n# Sistema de análisis de rendimiento de empleados\n\n# Datos de empleados\nempleados_data = [\n    {'id': 1, 'nombre': 'Ana García', 'departamento': 'Ventas', 'salario': 45000, 'ventas_mes': 120000, 'años_empresa': 3},\n    {'id': 2, 'nombre': 'Carlos López', 'departamento': 'Marketing', 'salario': 50000, 'ventas_mes': 0, 'años_empresa': 2},\n    {'id': 3, 'nombre': 'María Rodríguez', 'departamento': 'Ventas', 'salario': 48000, 'ventas_mes': 150000, 'años_empresa': 5},\n    {'id': 4, 'nombre': 'Luis Martín', 'departamento': 'IT', 'salario': 55000, 'ventas_mes': 0, 'años_empresa': 4},\n    {'id': 5, 'nombre': 'Elena Sánchez', 'departamento': 'Ventas', 'salario': 42000, 'ventas_mes': 95000, 'años_empresa': 1},\n    {'id': 6, 'nombre': 'Roberto Díaz', 'departamento': 'Marketing', 'salario': 52000, 'ventas_mes': 0, 'años_empresa': 6},\n    {'id': 7, 'nombre': 'Carmen Ruiz', 'departamento': 'IT', 'salario': 58000, 'ventas_mes': 0, 'años_empresa': 7},\n    {'id': 8, 'nombre': 'José Morales', 'departamento': 'Ventas', 'salario': 46000, 'ventas_mes': 110000, 'años_empresa': 2}\n]\n\ndef calcular_kpis_empleado(empleado):\n    \"\"\"Calcula KPIs para un empleado individual\"\"\"\n    kpis = {\n        'nombre': empleado['nombre'],\n        'departamento': empleado['departamento'],\n        'salario_anual': empleado['salario'],\n        'salario_mensual': empleado['salario'] / 12,\n        'ventas_mensuales': empleado['ventas_mes'],\n        'años_experiencia': empleado['años_empresa']\n    }\n    \n    # Calcular ROI si es de ventas\n    if empleado['departamento'] == 'Ventas' and empleado['ventas_mes'] > 0:\n        kpis['roi_mensual'] = empleado['ventas_mes'] / (empleado['salario'] / 12)\n        kpis['comision_estimada'] = empleado['ventas_mes'] * 0.03  # 3% comisión\n    else:\n        kpis['roi_mensual'] = 0\n        kpis['comision_estimada'] = 0\n    \n    # Score de rendimiento basado en varios factores\n    score = 0\n    if empleado['departamento'] == 'Ventas':\n        score = (empleado['ventas_mes'] / 10000) + (empleado['años_empresa'] * 10)\n    else:\n        score = (empleado['salario'] / 1000) + (empleado['años_empresa'] * 15)\n    \n    kpis['score_rendimiento'] = min(score, 100)  # Cap at 100\n    \n    return kpis\n\ndef analizar_departamento(empleados, departamento):\n    \"\"\"Analiza métricas de un departamento específico\"\"\"\n    emp_dept = [emp for emp in empleados if emp['departamento'] == departamento]\n    \n    if not emp_dept:\n        return {'error': f'No se encontraron empleados en {departamento}'}\n    \n    salarios = [emp['salario'] for emp in emp_dept]\n    años_exp = [emp['años_empresa'] for emp in emp_dept]\n    \n    analisis = {\n        'departamento': departamento,\n        'total_empleados': len(emp_dept),\n        'salario_promedio': statistics.mean(salarios),\n        'salario_mediano': statistics.median(salarios),\n        'salario_min': min(salarios),\n        'salario_max': max(salarios),\n        'experiencia_promedio': statistics.mean(años_exp),\n        'costo_nomina_mensual': sum(salarios) / 12,\n        'costo_nomina_anual': sum(salarios)\n    }\n    \n    # Análisis específico para ventas\n    if departamento == 'Ventas':\n        ventas_totales = sum(emp['ventas_mes'] for emp in emp_dept)\n        vendedores_activos = [emp for emp in emp_dept if emp['ventas_mes'] > 0]\n        \n        analisis['ventas_mensuales_total'] = ventas_totales\n        analisis['vendedores_activos'] = len(vendedores_activos)\n        analisis['venta_promedio_por_vendedor'] = ventas_totales / len(vendedores_activos) if vendedores_activos else 0\n        analisis['roi_departamento'] = ventas_totales / (sum(salarios) / 12) if sum(salarios) > 0 else 0\n    \n    return analisis\n\ndef ranking_empleados(empleados, criterio='rendimiento'):\n    \"\"\"Crea ranking de empleados por criterio\"\"\"\n    empleados_con_kpis = [calcular_kpis_empleado(emp) for emp in empleados]\n    \n    if criterio == 'rendimiento':\n        empleados_ordenados = sorted(empleados_con_kpis, key=lambda x: x['score_rendimiento'], reverse=True)\n    elif criterio == 'salario':\n        empleados_ordenados = sorted(empleados_con_kpis, key=lambda x: x['salario_anual'], reverse=True)\n    elif criterio == 'experiencia':\n        empleados_ordenados = sorted(empleados_con_kpis, key=lambda x: x['años_experiencia'], reverse=True)\n    elif criterio == 'ventas':\n        empleados_ordenados = sorted(empleados_con_kpis, key=lambda x: x['ventas_mensuales'], reverse=True)\n    else:\n        empleados_ordenados = empleados_con_kpis\n    \n    return empleados_ordenados\n\ndef identificar_top_performers(empleados):\n    \"\"\"Identifica empleados de alto rendimiento\"\"\"\n    empleados_con_kpis = [calcular_kpis_empleado(emp) for emp in empleados]\n    \n    # Top 25% por score de rendimiento\n    empleados_ordenados = sorted(empleados_con_kpis, key=lambda x: x['score_rendimiento'], reverse=True)\n    top_25_percent = int(len(empleados_ordenados) * 0.25) or 1\n    \n    return empleados_ordenados[:top_25_percent]\n\ndef generar_reporte_ejecutivo(empleados):\n    \"\"\"Genera reporte ejecutivo completo\"\"\"\n    print('🏢 ' + '='*60)\n    print('       REPORTE EJECUTIVO DE RECURSOS HUMANOS')\n    print('='*62)\n    \n    # Resumen general\n    total_empleados = len(empleados)\n    total_nomina = sum(emp['salario'] for emp in empleados)\n    experiencia_promedio = sum(emp['años_empresa'] for emp in empleados) / total_empleados\n    \n    print(f'\\n📊 RESUMEN GENERAL:')\n    print(f'   • Total de empleados: {total_empleados}')\n    print(f'   • Nómina anual total: ${total_nomina:,}')\n    print(f'   • Salario promedio: ${total_nomina / total_empleados:,.0f}')\n    print(f'   • Experiencia promedio: {experiencia_promedio:.1f} años')\n    \n    # Análisis por departamento\n    departamentos = list(set(emp['departamento'] for emp in empleados))\n    \n    print(f'\\n🏢 ANÁLISIS POR DEPARTAMENTO:')\n    for dept in departamentos:\n        analisis = analizar_departamento(empleados, dept)\n        print(f'\\n   📋 {dept.upper()}:')\n        print(f'      • Empleados: {analisis[\"total_empleados\"]}')\n        print(f'      • Salario promedio: ${analisis[\"salario_promedio\"]:,.0f}')\n        print(f'      • Costo mensual: ${analisis[\"costo_nomina_mensual\"]:,.0f}')\n        \n        if dept == 'Ventas' and 'ventas_mensuales_total' in analisis:\n            print(f'      • Ventas mensuales: ${analisis[\"ventas_mensuales_total\"]:,}')\n            print(f'      • ROI departamento: {analisis[\"roi_departamento\"]:.1f}x')\n    \n    # Top performers\n    print(f'\\n🌟 TOP PERFORMERS:')\n    top_performers = identificar_top_performers(empleados)\n    for i, emp in enumerate(top_performers, 1):\n        print(f'   {i}. {emp[\"nombre\"]} ({emp[\"departamento\"]}) - Score: {emp[\"score_rendimiento\"]:.1f}')\n        if emp['departamento'] == 'Ventas' and emp['ventas_mensuales'] > 0:\n            print(f'      💰 Ventas: ${emp[\"ventas_mensuales\"]:,} | ROI: {emp[\"roi_mensual\"]:.1f}x')\n    \n    # Ranking por ventas (solo vendedores)\n    vendedores = [emp for emp in empleados if emp['departamento'] == 'Ventas']\n    if vendedores:\n        print(f'\\n🎯 RANKING DE VENTAS:')\n        ranking_ventas = ranking_empleados(vendedores, 'ventas')\n        for i, emp in enumerate(ranking_ventas[:5], 1):\n            print(f'   {i}. {emp[\"nombre\"]:<20} ${emp[\"ventas_mensuales\"]:>8,}')\n    \n    # Análisis de compensación\n    salarios = [emp['salario'] for emp in empleados]\n    print(f'\\n💰 ANÁLISIS DE COMPENSACIÓN:')\n    print(f'   • Salario mínimo: ${min(salarios):,}')\n    print(f'   • Salario máximo: ${max(salarios):,}')\n    print(f'   • Salario mediano: ${statistics.median(salarios):,}')\n    \n    # Distribución por experiencia\n    por_experiencia = defaultdict(int)\n    for emp in empleados:\n        if emp['años_empresa'] <= 2:\n            por_experiencia['Junior (≤2 años)'] += 1\n        elif emp['años_empresa'] <= 5:\n            por_experiencia['Semi-Senior (3-5 años)'] += 1\n        else:\n            por_experiencia['Senior (>5 años)'] += 1\n    \n    print(f'\\n📈 DISTRIBUCIÓN POR EXPERIENCIA:')\n    for nivel, cantidad in por_experiencia.items():\n        porcentaje = (cantidad / total_empleados) * 100\n        print(f'   • {nivel}: {cantidad} empleados ({porcentaje:.1f}%)')\n    \n    # Recomendaciones\n    print(f'\\n💡 RECOMENDACIONES:')\n    \n    # Análisis de ventas\n    ventas_totales = sum(emp['ventas_mes'] for emp in vendedores)\n    costo_ventas = sum(emp['salario'] for emp in vendedores) / 12\n    \n    if ventas_totales > 0:\n        roi_ventas = ventas_totales / costo_ventas\n        print(f'   • ROI del equipo de ventas: {roi_ventas:.1f}x')\n        if roi_ventas < 10:\n            print('   ⚠️  Considerar optimizar el equipo de ventas')\n        else:\n            print('   ✅ Equipo de ventas con buen rendimiento')\n    \n    # Retención de talento\n    experiencia_alta = sum(1 for emp in empleados if emp['años_empresa'] > 5)\n    if experiencia_alta / total_empleados < 0.3:\n        print('   ⚠️  Bajo porcentaje de empleados senior - revisar retención')\n    else:\n        print('   ✅ Buena retención de empleados experimentados')\n    \n    print('\\n' + '='*62)\n    print('                    FIN DEL REPORTE')\n    print('='*62)\n\n# Ejecutar análisis completo\ngenerar_reporte_ejecutivo(empleados_data)\n\n# Ejemplos adicionales de análisis específicos\nprint('\\n' + '='*50)\nprint('ANÁLISIS ADICIONALES')\nprint('='*50)\n\n# Análisis detallado del departamento de ventas\nprint('\\n📊 ANÁLISIS DETALLADO - DEPARTAMENTO DE VENTAS:')\nanalisis_ventas = analizar_departamento(empleados_data, 'Ventas')\nfor key, value in analisis_ventas.items():\n    if isinstance(value, (int, float)):\n        if 'salario' in key or 'costo' in key or 'venta' in key:\n            print(f'   {key.replace(\"_\", \" \").title()}: ${value:,.0f}')\n        else:\n            print(f'   {key.replace(\"_\", \" \").title()}: {value:.2f}')\n    else:\n        print(f'   {key.replace(\"_\", \" \").title()}: {value}')",
          "validation": "(code) => code.includes('def calcular_kpis_empleado') && code.includes('def analizar_departamento') && code.includes('def ranking_empleados') && code.includes('def generar_reporte_ejecutivo')"
        }
      ]
    }
  }
}
